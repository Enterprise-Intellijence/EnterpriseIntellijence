14:13:20.865 [34mINFO [0;39m [35mo.h.validator.internal.util.Version[0;39m - HV000001: Hibernate Validator 8.0.0.Final 
14:13:20.906 [34mINFO [0;39m [35mc.e.e.EnterpriseIntellijenceApplication[0;39m - Starting EnterpriseIntellijenceApplication using Java 19.0.1 with PID 15445 (/home/ryuk/Desktop/Uni/Enterprise Applications/EnterpriseIntellijence/target/classes started by ryuk in /home/ryuk/Desktop/Uni/Enterprise Applications/EnterpriseIntellijence) 
14:13:20.907 [34mINFO [0;39m [35mc.e.e.EnterpriseIntellijenceApplication[0;39m - No active profile set, falling back to 1 default profile: "default" 
14:13:20.942 [34mINFO [0;39m [35mo.s.b.d.e.DevToolsPropertyDefaultsPostProcessor[0;39m - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable 
14:13:20.942 [34mINFO [0;39m [35mo.s.b.d.e.DevToolsPropertyDefaultsPostProcessor[0;39m - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG' 
14:13:21.588 [34mINFO [0;39m [35mo.s.d.r.c.RepositoryConfigurationDelegate[0;39m - Bootstrapping Spring Data JPA repositories in DEFAULT mode. 
14:13:21.668 [34mINFO [0;39m [35mo.s.d.r.c.RepositoryConfigurationDelegate[0;39m - Finished Spring Data repository scanning in 75 ms. Found 21 JPA repository interfaces. 
14:13:22.072 [34mINFO [0;39m [35mo.s.b.w.e.tomcat.TomcatWebServer[0;39m - Tomcat initialized with port(s): 8080 (http) 
14:13:22.077 [34mINFO [0;39m [35mo.a.coyote.http11.Http11NioProtocol[0;39m - Initializing ProtocolHandler ["http-nio-8080"] 
14:13:22.078 [34mINFO [0;39m [35mo.a.catalina.core.StandardService[0;39m - Starting service [Tomcat] 
14:13:22.078 [34mINFO [0;39m [35mo.a.catalina.core.StandardEngine[0;39m - Starting Servlet engine: [Apache Tomcat/10.1.7] 
14:13:22.109 [34mINFO [0;39m [35mo.a.c.c.C.[Tomcat].[localhost].[/][0;39m - Initializing Spring embedded WebApplicationContext 
14:13:22.109 [34mINFO [0;39m [35mo.s.b.w.s.c.ServletWebServerApplicationContext[0;39m - Root WebApplicationContext: initialization completed in 1166 ms 
14:13:22.137 [34mINFO [0;39m [35mcom.zaxxer.hikari.HikariDataSource[0;39m - HikariPool-1 - Starting... 
14:13:22.360 [34mINFO [0;39m [35mcom.zaxxer.hikari.pool.HikariPool[0;39m - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@4838e397 
14:13:22.361 [34mINFO [0;39m [35mcom.zaxxer.hikari.HikariDataSource[0;39m - HikariPool-1 - Start completed. 
14:13:22.370 [34mINFO [0;39m [35mo.s.b.a.h.H2ConsoleAutoConfiguration[0;39m - H2 console available at '/h2-console'. Database available at 'jdbc:postgresql://localhost:5432/postgres' 
14:13:22.443 [34mINFO [0;39m [35mo.h.jpa.internal.util.LogHelper[0;39m - HHH000204: Processing PersistenceUnitInfo [name: default] 
14:13:22.479 [34mINFO [0;39m [35morg.hibernate.Version[0;39m - HHH000412: Hibernate ORM core version 6.1.7.Final 
14:13:22.700 [34mINFO [0;39m [35mSQL dialect[0;39m - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect 
14:13:23.983 [34mINFO [0;39m [35mo.h.e.t.j.p.i.JtaPlatformInitiator[0;39m - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform] 
14:13:23.995 [34mINFO [0;39m [35mo.s.o.j.LocalContainerEntityManagerFactoryBean[0;39m - Initialized JPA EntityManagerFactory for persistence unit 'default' 
14:13:25.418 [34mWARN [0;39m [35mo.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration[0;39m - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning 
14:13:25.597 [34mINFO [0;39m [35mo.s.s.web.DefaultSecurityFilterChain[0;39m - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4edd8755, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@24ade5c4, org.springframework.security.web.context.SecurityContextHolderFilter@2d61037c, org.springframework.security.web.header.HeaderWriterFilter@ec3f8d5, org.springframework.web.filter.CorsFilter@5a102a, org.springframework.security.web.authentication.logout.LogoutFilter@7117d4b2, com.enterpriseintellijence.enterpriseintellijence.security.RequestFilter@53104438, com.enterpriseintellijence.enterpriseintellijence.security.CustomAuthenticationFilter@750c926c, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3aef9933, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@47375bcb, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@574944b7, org.springframework.security.web.session.SessionManagementFilter@533cff78, org.springframework.security.web.access.ExceptionTranslationFilter@7f5c8d5d, org.springframework.security.web.access.intercept.AuthorizationFilter@607b6fe0] 
14:13:25.853 [34mINFO [0;39m [35mo.s.b.d.a.OptionalLiveReloadServer[0;39m - LiveReload server is running on port 35729 
14:13:25.870 [34mINFO [0;39m [35mo.a.coyote.http11.Http11NioProtocol[0;39m - Starting ProtocolHandler ["http-nio-8080"] 
14:13:25.880 [34mINFO [0;39m [35mo.s.b.w.e.tomcat.TomcatWebServer[0;39m - Tomcat started on port(s): 8080 (http) with context path '' 
14:13:25.888 [34mINFO [0;39m [35mc.e.e.EnterpriseIntellijenceApplication[0;39m - Started EnterpriseIntellijenceApplication in 5.289 seconds (process running for 6.299) 
14:13:33.039 [34mINFO [0;39m [35mo.s.o.j.LocalContainerEntityManagerFactoryBean[0;39m - Closing JPA EntityManagerFactory for persistence unit 'default' 
14:13:33.041 [34mINFO [0;39m [35mcom.zaxxer.hikari.HikariDataSource[0;39m - HikariPool-1 - Shutdown initiated... 
14:13:33.046 [34mINFO [0;39m [35mcom.zaxxer.hikari.HikariDataSource[0;39m - HikariPool-1 - Shutdown completed. 
23:48:59.598 [34mINFO [0;39m [35mo.h.validator.internal.util.Version[0;39m - HV000001: Hibernate Validator 8.0.0.Final 
23:48:59.630 [34mINFO [0;39m [35mc.e.e.EnterpriseIntellijenceApplication[0;39m - Starting EnterpriseIntellijenceApplication using Java 19.0.1 with PID 16279 (/home/ryuk/Desktop/Uni/Enterprise Applications/EnterpriseIntellijence/target/classes started by ryuk in /home/ryuk/Desktop/Uni/Enterprise Applications/EnterpriseIntellijence) 
23:48:59.631 [34mINFO [0;39m [35mc.e.e.EnterpriseIntellijenceApplication[0;39m - No active profile set, falling back to 1 default profile: "default" 
23:48:59.664 [34mINFO [0;39m [35mo.s.b.d.e.DevToolsPropertyDefaultsPostProcessor[0;39m - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable 
23:48:59.664 [34mINFO [0;39m [35mo.s.b.d.e.DevToolsPropertyDefaultsPostProcessor[0;39m - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG' 
23:49:00.664 [34mINFO [0;39m [35mo.s.d.r.c.RepositoryConfigurationDelegate[0;39m - Bootstrapping Spring Data JPA repositories in DEFAULT mode. 
23:49:00.866 [34mINFO [0;39m [35mo.s.d.r.c.RepositoryConfigurationDelegate[0;39m - Finished Spring Data repository scanning in 190 ms. Found 21 JPA repository interfaces. 
23:49:02.105 [34mINFO [0;39m [35mo.s.b.w.e.tomcat.TomcatWebServer[0;39m - Tomcat initialized with port(s): 8080 (http) 
23:49:02.115 [34mINFO [0;39m [35mo.a.coyote.http11.Http11NioProtocol[0;39m - Initializing ProtocolHandler ["http-nio-8080"] 
23:49:02.116 [34mINFO [0;39m [35mo.a.catalina.core.StandardService[0;39m - Starting service [Tomcat] 
23:49:02.116 [34mINFO [0;39m [35mo.a.catalina.core.StandardEngine[0;39m - Starting Servlet engine: [Apache Tomcat/10.1.7] 
23:49:02.164 [34mINFO [0;39m [35mo.a.c.c.C.[Tomcat].[localhost].[/][0;39m - Initializing Spring embedded WebApplicationContext 
23:49:02.164 [34mINFO [0;39m [35mo.s.b.w.s.c.ServletWebServerApplicationContext[0;39m - Root WebApplicationContext: initialization completed in 2499 ms 
23:49:02.209 [34mINFO [0;39m [35mcom.zaxxer.hikari.HikariDataSource[0;39m - HikariPool-1 - Starting... 
23:49:02.647 [34mINFO [0;39m [35mcom.zaxxer.hikari.pool.HikariPool[0;39m - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@8919fdb 
23:49:02.649 [34mINFO [0;39m [35mcom.zaxxer.hikari.HikariDataSource[0;39m - HikariPool-1 - Start completed. 
23:49:02.669 [34mINFO [0;39m [35mo.s.b.a.h.H2ConsoleAutoConfiguration[0;39m - H2 console available at '/h2-console'. Database available at 'jdbc:postgresql://localhost:5432/postgres' 
23:49:02.917 [34mINFO [0;39m [35mo.h.jpa.internal.util.LogHelper[0;39m - HHH000204: Processing PersistenceUnitInfo [name: default] 
23:49:03.001 [34mINFO [0;39m [35morg.hibernate.Version[0;39m - HHH000412: Hibernate ORM core version 6.1.7.Final 
23:49:03.401 [34mINFO [0;39m [35mSQL dialect[0;39m - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQLDialect 
23:49:04.896 [34mINFO [0;39m [35mo.h.e.t.j.p.i.JtaPlatformInitiator[0;39m - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform] 
23:49:04.907 [34mINFO [0;39m [35mo.s.o.j.LocalContainerEntityManagerFactoryBean[0;39m - Initialized JPA EntityManagerFactory for persistence unit 'default' 
23:49:06.461 [34mWARN [0;39m [35mo.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration[0;39m - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning 
23:49:06.662 [34mINFO [0;39m [35mo.s.s.web.DefaultSecurityFilterChain[0;39m - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@7d00496f, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2d6ba754, org.springframework.security.web.context.SecurityContextHolderFilter@238e85cc, org.springframework.security.web.header.HeaderWriterFilter@253b26f5, org.springframework.web.filter.CorsFilter@2fb66345, org.springframework.security.web.authentication.logout.LogoutFilter@2b255676, com.enterpriseintellijence.enterpriseintellijence.security.RequestFilter@7cdaa481, com.enterpriseintellijence.enterpriseintellijence.security.CustomAuthenticationFilter@5eafaf8e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@583bafe1, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@280cd17c, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@211bde05, org.springframework.security.web.session.SessionManagementFilter@327959e7, org.springframework.security.web.access.ExceptionTranslationFilter@49c0a503, org.springframework.security.web.access.intercept.AuthorizationFilter@40f2b218] 
23:49:06.935 [34mINFO [0;39m [35mo.s.b.d.a.OptionalLiveReloadServer[0;39m - LiveReload server is running on port 35729 
23:49:06.953 [34mINFO [0;39m [35mo.a.coyote.http11.Http11NioProtocol[0;39m - Starting ProtocolHandler ["http-nio-8080"] 
23:49:06.969 [34mINFO [0;39m [35mo.s.b.w.e.tomcat.TomcatWebServer[0;39m - Tomcat started on port(s): 8080 (http) with context path '' 
23:49:06.978 [34mINFO [0;39m [35mc.e.e.EnterpriseIntellijenceApplication[0;39m - Started EnterpriseIntellijenceApplication in 7.636 seconds (process running for 8.679) 
23:49:23.460 [34mINFO [0;39m [35mo.a.c.c.C.[Tomcat].[localhost].[/][0;39m - Initializing Spring DispatcherServlet 'dispatcherServlet' 
23:49:23.460 [34mINFO [0;39m [35mo.s.web.servlet.DispatcherServlet[0;39m - Initializing Servlet 'dispatcherServlet' 
23:49:23.464 [34mINFO [0;39m [35mo.s.web.servlet.DispatcherServlet[0;39m - Completed initialization in 3 ms 
23:49:23.525 [34mINFO [0;39m [35mmyLogger[0;39m - 
FINISHED PROCESSING : METHOD={GET}; REQUESTURI={/swagger-ui/index.html}; REMOTEADDR={127.0.0.1};
REQUEST PAYLOAD={};
LOGGED USERNAME={}; RESPONSE CODE={200};
RESPONSE={}; TIME TAKEN={43} 
23:49:23.599 [34mINFO [0;39m [35mmyLogger[0;39m - 
FINISHED PROCESSING : METHOD={GET}; REQUESTURI={/swagger-ui/index.css}; REMOTEADDR={127.0.0.1};
REQUEST PAYLOAD={};
LOGGED USERNAME={}; RESPONSE CODE={200};
RESPONSE={}; TIME TAKEN={12} 
23:49:23.603 [34mINFO [0;39m [35mmyLogger[0;39m - 
FINISHED PROCESSING : METHOD={GET}; REQUESTURI={/swagger-ui/swagger-ui-standalone-preset.js}; REMOTEADDR={127.0.0.1};
REQUEST PAYLOAD={};
LOGGED USERNAME={}; RESPONSE CODE={200};
RESPONSE={}; TIME TAKEN={15} 
23:49:23.608 [34mINFO [0;39m [35mmyLogger[0;39m - 
FINISHED PROCESSING : METHOD={GET}; REQUESTURI={/swagger-ui/swagger-ui.css}; REMOTEADDR={127.0.0.1};
REQUEST PAYLOAD={};
LOGGED USERNAME={}; RESPONSE CODE={200};
RESPONSE={}; TIME TAKEN={19} 
23:49:23.617 [34mINFO [0;39m [35mmyLogger[0;39m - 
FINISHED PROCESSING : METHOD={GET}; REQUESTURI={/swagger-ui/swagger-ui-bundle.js}; REMOTEADDR={127.0.0.1};
REQUEST PAYLOAD={};
LOGGED USERNAME={}; RESPONSE CODE={200};
RESPONSE={}; TIME TAKEN={29} 
23:49:23.632 [34mINFO [0;39m [35mmyLogger[0;39m - 
FINISHED PROCESSING : METHOD={GET}; REQUESTURI={/swagger-ui/swagger-initializer.js}; REMOTEADDR={127.0.0.1};
REQUEST PAYLOAD={};
LOGGED USERNAME={}; RESPONSE CODE={200};
RESPONSE={}; TIME TAKEN={45} 
23:49:23.837 [34mINFO [0;39m [35mmyLogger[0;39m - 
FINISHED PROCESSING : METHOD={GET}; REQUESTURI={/swagger-ui/favicon-16x16.png}; REMOTEADDR={127.0.0.1};
REQUEST PAYLOAD={};
LOGGED USERNAME={}; RESPONSE CODE={200};
RESPONSE={}; TIME TAKEN={11} 
23:49:23.933 [34mINFO [0;39m [35mmyLogger[0;39m - 
FINISHED PROCESSING : METHOD={GET}; REQUESTURI={/v3/api-docs/swagger-config}; REMOTEADDR={127.0.0.1};
REQUEST PAYLOAD={};
LOGGED USERNAME={}; RESPONSE CODE={200};
RESPONSE={{
  "configUrl" : "/v3/api-docs/swagger-config",
  "deepLinking" : true,
  "filter" : "true",
  "oauth2RedirectUrl" : "http://localhost:8080/swagger-ui/oauth2-redirect.html",
  "urls" : [ {
    "url" : "/v3/api-docs",
    "name" : "backend"
  } ],
  "validatorUrl" : ""
}}; TIME TAKEN={41} 
23:49:24.177 [34mWARN [0;39m [35mo.s.c.u.SpringDocAnnotationsUtils[0;39m - Graceful exception occurred 
java.lang.IllegalArgumentException: Conflicting setter definitions for property "ifUnmodifiedSince": org.springframework.http.HttpHeaders#setIfUnmodifiedSince(1 params) vs org.springframework.http.HttpHeaders#setIfUnmodifiedSince(1 params)
	at com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getSetter(POJOPropertyBuilder.java:504)
	at io.swagger.v3.core.jackson.ModelResolver.ignore(ModelResolver.java:1089)
	at io.swagger.v3.core.jackson.ModelResolver.resolve(ModelResolver.java:583)
	at org.springdoc.core.converters.AdditionalModelsConverter.resolve(AdditionalModelsConverter.java:155)
	at org.springdoc.core.converters.FileSupportConverter.resolve(FileSupportConverter.java:69)
	at org.springdoc.core.converters.ResponseSupportConverter.resolve(ResponseSupportConverter.java:79)
	at org.springdoc.core.converters.SchemaPropertyDeprecatingConverter.resolve(SchemaPropertyDeprecatingConverter.java:92)
	at org.springdoc.core.converters.PolymorphicModelConverter.resolve(PolymorphicModelConverter.java:77)
	at org.springdoc.core.converters.PageableOpenAPIConverter.resolve(PageableOpenAPIConverter.java:93)
	at org.springdoc.core.converters.SortOpenAPIConverter.resolve(SortOpenAPIConverter.java:83)
	at io.swagger.v3.core.converter.ModelConverterContextImpl.resolve(ModelConverterContextImpl.java:97)
	at io.swagger.v3.core.jackson.ModelResolver.resolve(ModelResolver.java:659)
	at org.springdoc.core.converters.AdditionalModelsConverter.resolve(AdditionalModelsConverter.java:155)
	at org.springdoc.core.converters.FileSupportConverter.resolve(FileSupportConverter.java:69)
	at org.springdoc.core.converters.ResponseSupportConverter.resolve(ResponseSupportConverter.java:79)
	at org.springdoc.core.converters.SchemaPropertyDeprecatingConverter.resolve(SchemaPropertyDeprecatingConverter.java:92)
	at org.springdoc.core.converters.PolymorphicModelConverter.resolve(PolymorphicModelConverter.java:77)
	at org.springdoc.core.converters.PageableOpenAPIConverter.resolve(PageableOpenAPIConverter.java:93)
	at org.springdoc.core.converters.SortOpenAPIConverter.resolve(SortOpenAPIConverter.java:83)
	at io.swagger.v3.core.converter.ModelConverterContextImpl.resolve(ModelConverterContextImpl.java:97)
	at io.swagger.v3.core.converter.ModelConverters.resolveAsResolvedSchema(ModelConverters.java:110)
	at org.springdoc.core.utils.SpringDocAnnotationsUtils.extractSchema(SpringDocAnnotationsUtils.java:122)
	at org.springdoc.core.service.GenericResponseService.calculateSchema(GenericResponseService.java:553)
	at org.springdoc.core.service.GenericResponseService.buildContent(GenericResponseService.java:512)
	at org.springdoc.core.service.GenericResponseService.buildContent(GenericResponseService.java:493)
	at org.springdoc.core.service.GenericResponseService.buildApiResponses(GenericResponseService.java:585)
	at org.springdoc.core.service.GenericResponseService.buildGenericApiResponses(GenericResponseService.java:410)
	at org.springdoc.core.service.GenericResponseService.buildGenericResponse(GenericResponseService.java:322)
	at org.springdoc.api.AbstractOpenApiResource.getOpenApi(AbstractOpenApiResource.java:332)
	at org.springdoc.webmvc.api.OpenApiResource.openapiJson(OpenApiResource.java:124)
	at org.springdoc.webmvc.api.OpenApiWebMvcResource.openapiJson(OpenApiWebMvcResource.java:111)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:537)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.enterpriseintellijence.enterpriseintellijence.security.RequestFilter.doFilterInternal(RequestFilter.java:66)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1589)
23:49:24.220 [34mWARN [0;39m [35mo.s.c.u.SpringDocAnnotationsUtils[0;39m - Graceful exception occurred 
java.lang.IllegalArgumentException: Conflicting setter definitions for property "ifUnmodifiedSince": org.springframework.http.HttpHeaders#setIfUnmodifiedSince(1 params) vs org.springframework.http.HttpHeaders#setIfUnmodifiedSince(1 params)
	at com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getSetter(POJOPropertyBuilder.java:504)
	at io.swagger.v3.core.jackson.ModelResolver.ignore(ModelResolver.java:1089)
	at io.swagger.v3.core.jackson.ModelResolver.resolve(ModelResolver.java:583)
	at org.springdoc.core.converters.AdditionalModelsConverter.resolve(AdditionalModelsConverter.java:155)
	at org.springdoc.core.converters.FileSupportConverter.resolve(FileSupportConverter.java:69)
	at org.springdoc.core.converters.ResponseSupportConverter.resolve(ResponseSupportConverter.java:79)
	at org.springdoc.core.converters.SchemaPropertyDeprecatingConverter.resolve(SchemaPropertyDeprecatingConverter.java:92)
	at org.springdoc.core.converters.PolymorphicModelConverter.resolve(PolymorphicModelConverter.java:77)
	at org.springdoc.core.converters.PageableOpenAPIConverter.resolve(PageableOpenAPIConverter.java:93)
	at org.springdoc.core.converters.SortOpenAPIConverter.resolve(SortOpenAPIConverter.java:83)
	at io.swagger.v3.core.converter.ModelConverterContextImpl.resolve(ModelConverterContextImpl.java:97)
	at io.swagger.v3.core.jackson.ModelResolver.resolve(ModelResolver.java:659)
	at org.springdoc.core.converters.AdditionalModelsConverter.resolve(AdditionalModelsConverter.java:155)
	at org.springdoc.core.converters.FileSupportConverter.resolve(FileSupportConverter.java:69)
	at org.springdoc.core.converters.ResponseSupportConverter.resolve(ResponseSupportConverter.java:79)
	at org.springdoc.core.converters.SchemaPropertyDeprecatingConverter.resolve(SchemaPropertyDeprecatingConverter.java:92)
	at org.springdoc.core.converters.PolymorphicModelConverter.resolve(PolymorphicModelConverter.java:77)
	at org.springdoc.core.converters.PageableOpenAPIConverter.resolve(PageableOpenAPIConverter.java:93)
	at org.springdoc.core.converters.SortOpenAPIConverter.resolve(SortOpenAPIConverter.java:83)
	at io.swagger.v3.core.converter.ModelConverterContextImpl.resolve(ModelConverterContextImpl.java:97)
	at io.swagger.v3.core.converter.ModelConverters.resolveAsResolvedSchema(ModelConverters.java:110)
	at org.springdoc.core.utils.SpringDocAnnotationsUtils.extractSchema(SpringDocAnnotationsUtils.java:122)
	at org.springdoc.core.service.GenericResponseService.calculateSchema(GenericResponseService.java:553)
	at org.springdoc.core.service.GenericResponseService.buildApiResponses(GenericResponseService.java:604)
	at org.springdoc.core.service.GenericResponseService.buildGenericApiResponses(GenericResponseService.java:410)
	at org.springdoc.core.service.GenericResponseService.buildGenericResponse(GenericResponseService.java:322)
	at org.springdoc.api.AbstractOpenApiResource.getOpenApi(AbstractOpenApiResource.java:332)
	at org.springdoc.webmvc.api.OpenApiResource.openapiJson(OpenApiResource.java:124)
	at org.springdoc.webmvc.api.OpenApiWebMvcResource.openapiJson(OpenApiWebMvcResource.java:111)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:537)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.enterpriseintellijence.enterpriseintellijence.security.RequestFilter.doFilterInternal(RequestFilter.java:66)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1589)
23:49:24.261 [34mWARN [0;39m [35mo.s.c.u.SpringDocAnnotationsUtils[0;39m - Graceful exception occurred 
java.lang.IllegalArgumentException: Conflicting setter definitions for property "ifUnmodifiedSince": org.springframework.http.HttpHeaders#setIfUnmodifiedSince(1 params) vs org.springframework.http.HttpHeaders#setIfUnmodifiedSince(1 params)
	at com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getSetter(POJOPropertyBuilder.java:504)
	at io.swagger.v3.core.jackson.ModelResolver.ignore(ModelResolver.java:1089)
	at io.swagger.v3.core.jackson.ModelResolver.resolve(ModelResolver.java:583)
	at org.springdoc.core.converters.AdditionalModelsConverter.resolve(AdditionalModelsConverter.java:155)
	at org.springdoc.core.converters.FileSupportConverter.resolve(FileSupportConverter.java:69)
	at org.springdoc.core.converters.ResponseSupportConverter.resolve(ResponseSupportConverter.java:79)
	at org.springdoc.core.converters.SchemaPropertyDeprecatingConverter.resolve(SchemaPropertyDeprecatingConverter.java:92)
	at org.springdoc.core.converters.PolymorphicModelConverter.resolve(PolymorphicModelConverter.java:77)
	at org.springdoc.core.converters.PageableOpenAPIConverter.resolve(PageableOpenAPIConverter.java:93)
	at org.springdoc.core.converters.SortOpenAPIConverter.resolve(SortOpenAPIConverter.java:83)
	at io.swagger.v3.core.converter.ModelConverterContextImpl.resolve(ModelConverterContextImpl.java:97)
	at io.swagger.v3.core.jackson.ModelResolver.resolve(ModelResolver.java:659)
	at org.springdoc.core.converters.AdditionalModelsConverter.resolve(AdditionalModelsConverter.java:155)
	at org.springdoc.core.converters.FileSupportConverter.resolve(FileSupportConverter.java:69)
	at org.springdoc.core.converters.ResponseSupportConverter.resolve(ResponseSupportConverter.java:79)
	at org.springdoc.core.converters.SchemaPropertyDeprecatingConverter.resolve(SchemaPropertyDeprecatingConverter.java:92)
	at org.springdoc.core.converters.PolymorphicModelConverter.resolve(PolymorphicModelConverter.java:77)
	at org.springdoc.core.converters.PageableOpenAPIConverter.resolve(PageableOpenAPIConverter.java:93)
	at org.springdoc.core.converters.SortOpenAPIConverter.resolve(SortOpenAPIConverter.java:83)
	at io.swagger.v3.core.converter.ModelConverterContextImpl.resolve(ModelConverterContextImpl.java:97)
	at io.swagger.v3.core.converter.ModelConverters.resolveAsResolvedSchema(ModelConverters.java:110)
	at org.springdoc.core.utils.SpringDocAnnotationsUtils.extractSchema(SpringDocAnnotationsUtils.java:122)
	at org.springdoc.core.service.GenericResponseService.calculateSchema(GenericResponseService.java:553)
	at org.springdoc.core.service.GenericResponseService.buildContent(GenericResponseService.java:512)
	at org.springdoc.core.service.GenericResponseService.buildContent(GenericResponseService.java:493)
	at org.springdoc.core.service.GenericResponseService.buildApiResponses(GenericResponseService.java:585)
	at org.springdoc.core.service.GenericResponseService.buildGenericApiResponses(GenericResponseService.java:410)
	at org.springdoc.core.service.GenericResponseService.buildGenericResponse(GenericResponseService.java:322)
	at org.springdoc.api.AbstractOpenApiResource.getOpenApi(AbstractOpenApiResource.java:332)
	at org.springdoc.webmvc.api.OpenApiResource.openapiJson(OpenApiResource.java:124)
	at org.springdoc.webmvc.api.OpenApiWebMvcResource.openapiJson(OpenApiWebMvcResource.java:111)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:537)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.enterpriseintellijence.enterpriseintellijence.security.RequestFilter.doFilterInternal(RequestFilter.java:66)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1589)
23:49:24.289 [34mWARN [0;39m [35mo.s.c.u.SpringDocAnnotationsUtils[0;39m - Graceful exception occurred 
java.lang.IllegalArgumentException: Conflicting setter definitions for property "ifUnmodifiedSince": org.springframework.http.HttpHeaders#setIfUnmodifiedSince(1 params) vs org.springframework.http.HttpHeaders#setIfUnmodifiedSince(1 params)
	at com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getSetter(POJOPropertyBuilder.java:504)
	at io.swagger.v3.core.jackson.ModelResolver.ignore(ModelResolver.java:1089)
	at io.swagger.v3.core.jackson.ModelResolver.resolve(ModelResolver.java:583)
	at org.springdoc.core.converters.AdditionalModelsConverter.resolve(AdditionalModelsConverter.java:155)
	at org.springdoc.core.converters.FileSupportConverter.resolve(FileSupportConverter.java:69)
	at org.springdoc.core.converters.ResponseSupportConverter.resolve(ResponseSupportConverter.java:79)
	at org.springdoc.core.converters.SchemaPropertyDeprecatingConverter.resolve(SchemaPropertyDeprecatingConverter.java:92)
	at org.springdoc.core.converters.PolymorphicModelConverter.resolve(PolymorphicModelConverter.java:77)
	at org.springdoc.core.converters.PageableOpenAPIConverter.resolve(PageableOpenAPIConverter.java:93)
	at org.springdoc.core.converters.SortOpenAPIConverter.resolve(SortOpenAPIConverter.java:83)
	at io.swagger.v3.core.converter.ModelConverterContextImpl.resolve(ModelConverterContextImpl.java:97)
	at io.swagger.v3.core.jackson.ModelResolver.resolve(ModelResolver.java:659)
	at org.springdoc.core.converters.AdditionalModelsConverter.resolve(AdditionalModelsConverter.java:155)
	at org.springdoc.core.converters.FileSupportConverter.resolve(FileSupportConverter.java:69)
	at org.springdoc.core.converters.ResponseSupportConverter.resolve(ResponseSupportConverter.java:79)
	at org.springdoc.core.converters.SchemaPropertyDeprecatingConverter.resolve(SchemaPropertyDeprecatingConverter.java:92)
	at org.springdoc.core.converters.PolymorphicModelConverter.resolve(PolymorphicModelConverter.java:77)
	at org.springdoc.core.converters.PageableOpenAPIConverter.resolve(PageableOpenAPIConverter.java:93)
	at org.springdoc.core.converters.SortOpenAPIConverter.resolve(SortOpenAPIConverter.java:83)
	at io.swagger.v3.core.converter.ModelConverterContextImpl.resolve(ModelConverterContextImpl.java:97)
	at io.swagger.v3.core.converter.ModelConverters.resolveAsResolvedSchema(ModelConverters.java:110)
	at org.springdoc.core.utils.SpringDocAnnotationsUtils.extractSchema(SpringDocAnnotationsUtils.java:122)
	at org.springdoc.core.service.GenericResponseService.calculateSchema(GenericResponseService.java:553)
	at org.springdoc.core.service.GenericResponseService.buildApiResponses(GenericResponseService.java:604)
	at org.springdoc.core.service.GenericResponseService.buildGenericApiResponses(GenericResponseService.java:410)
	at org.springdoc.core.service.GenericResponseService.buildGenericResponse(GenericResponseService.java:322)
	at org.springdoc.api.AbstractOpenApiResource.getOpenApi(AbstractOpenApiResource.java:332)
	at org.springdoc.webmvc.api.OpenApiResource.openapiJson(OpenApiResource.java:124)
	at org.springdoc.webmvc.api.OpenApiWebMvcResource.openapiJson(OpenApiWebMvcResource.java:111)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:537)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.enterpriseintellijence.enterpriseintellijence.security.RequestFilter.doFilterInternal(RequestFilter.java:66)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1589)
23:49:24.318 [34mWARN [0;39m [35mo.s.c.u.SpringDocAnnotationsUtils[0;39m - Graceful exception occurred 
java.lang.IllegalArgumentException: Conflicting setter definitions for property "ifUnmodifiedSince": org.springframework.http.HttpHeaders#setIfUnmodifiedSince(1 params) vs org.springframework.http.HttpHeaders#setIfUnmodifiedSince(1 params)
	at com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getSetter(POJOPropertyBuilder.java:504)
	at io.swagger.v3.core.jackson.ModelResolver.ignore(ModelResolver.java:1089)
	at io.swagger.v3.core.jackson.ModelResolver.resolve(ModelResolver.java:583)
	at org.springdoc.core.converters.AdditionalModelsConverter.resolve(AdditionalModelsConverter.java:155)
	at org.springdoc.core.converters.FileSupportConverter.resolve(FileSupportConverter.java:69)
	at org.springdoc.core.converters.ResponseSupportConverter.resolve(ResponseSupportConverter.java:79)
	at org.springdoc.core.converters.SchemaPropertyDeprecatingConverter.resolve(SchemaPropertyDeprecatingConverter.java:92)
	at org.springdoc.core.converters.PolymorphicModelConverter.resolve(PolymorphicModelConverter.java:77)
	at org.springdoc.core.converters.PageableOpenAPIConverter.resolve(PageableOpenAPIConverter.java:93)
	at org.springdoc.core.converters.SortOpenAPIConverter.resolve(SortOpenAPIConverter.java:83)
	at io.swagger.v3.core.converter.ModelConverterContextImpl.resolve(ModelConverterContextImpl.java:97)
	at io.swagger.v3.core.jackson.ModelResolver.resolve(ModelResolver.java:659)
	at org.springdoc.core.converters.AdditionalModelsConverter.resolve(AdditionalModelsConverter.java:155)
	at org.springdoc.core.converters.FileSupportConverter.resolve(FileSupportConverter.java:69)
	at org.springdoc.core.converters.ResponseSupportConverter.resolve(ResponseSupportConverter.java:79)
	at org.springdoc.core.converters.SchemaPropertyDeprecatingConverter.resolve(SchemaPropertyDeprecatingConverter.java:92)
	at org.springdoc.core.converters.PolymorphicModelConverter.resolve(PolymorphicModelConverter.java:77)
	at org.springdoc.core.converters.PageableOpenAPIConverter.resolve(PageableOpenAPIConverter.java:93)
	at org.springdoc.core.converters.SortOpenAPIConverter.resolve(SortOpenAPIConverter.java:83)
	at io.swagger.v3.core.converter.ModelConverterContextImpl.resolve(ModelConverterContextImpl.java:97)
	at io.swagger.v3.core.converter.ModelConverters.resolveAsResolvedSchema(ModelConverters.java:110)
	at org.springdoc.core.utils.SpringDocAnnotationsUtils.extractSchema(SpringDocAnnotationsUtils.java:122)
	at org.springdoc.core.service.GenericResponseService.calculateSchema(GenericResponseService.java:553)
	at org.springdoc.core.service.GenericResponseService.buildContent(GenericResponseService.java:512)
	at org.springdoc.core.service.GenericResponseService.buildContent(GenericResponseService.java:493)
	at org.springdoc.core.service.GenericResponseService.buildApiResponses(GenericResponseService.java:585)
	at org.springdoc.core.service.GenericResponseService.buildGenericApiResponses(GenericResponseService.java:410)
	at org.springdoc.core.service.GenericResponseService.buildGenericResponse(GenericResponseService.java:322)
	at org.springdoc.api.AbstractOpenApiResource.getOpenApi(AbstractOpenApiResource.java:332)
	at org.springdoc.webmvc.api.OpenApiResource.openapiJson(OpenApiResource.java:124)
	at org.springdoc.webmvc.api.OpenApiWebMvcResource.openapiJson(OpenApiWebMvcResource.java:111)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:537)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.enterpriseintellijence.enterpriseintellijence.security.RequestFilter.doFilterInternal(RequestFilter.java:66)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1589)
23:49:24.347 [34mWARN [0;39m [35mo.s.c.u.SpringDocAnnotationsUtils[0;39m - Graceful exception occurred 
java.lang.IllegalArgumentException: Conflicting setter definitions for property "ifUnmodifiedSince": org.springframework.http.HttpHeaders#setIfUnmodifiedSince(1 params) vs org.springframework.http.HttpHeaders#setIfUnmodifiedSince(1 params)
	at com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getSetter(POJOPropertyBuilder.java:504)
	at io.swagger.v3.core.jackson.ModelResolver.ignore(ModelResolver.java:1089)
	at io.swagger.v3.core.jackson.ModelResolver.resolve(ModelResolver.java:583)
	at org.springdoc.core.converters.AdditionalModelsConverter.resolve(AdditionalModelsConverter.java:155)
	at org.springdoc.core.converters.FileSupportConverter.resolve(FileSupportConverter.java:69)
	at org.springdoc.core.converters.ResponseSupportConverter.resolve(ResponseSupportConverter.java:79)
	at org.springdoc.core.converters.SchemaPropertyDeprecatingConverter.resolve(SchemaPropertyDeprecatingConverter.java:92)
	at org.springdoc.core.converters.PolymorphicModelConverter.resolve(PolymorphicModelConverter.java:77)
	at org.springdoc.core.converters.PageableOpenAPIConverter.resolve(PageableOpenAPIConverter.java:93)
	at org.springdoc.core.converters.SortOpenAPIConverter.resolve(SortOpenAPIConverter.java:83)
	at io.swagger.v3.core.converter.ModelConverterContextImpl.resolve(ModelConverterContextImpl.java:97)
	at io.swagger.v3.core.jackson.ModelResolver.resolve(ModelResolver.java:659)
	at org.springdoc.core.converters.AdditionalModelsConverter.resolve(AdditionalModelsConverter.java:155)
	at org.springdoc.core.converters.FileSupportConverter.resolve(FileSupportConverter.java:69)
	at org.springdoc.core.converters.ResponseSupportConverter.resolve(ResponseSupportConverter.java:79)
	at org.springdoc.core.converters.SchemaPropertyDeprecatingConverter.resolve(SchemaPropertyDeprecatingConverter.java:92)
	at org.springdoc.core.converters.PolymorphicModelConverter.resolve(PolymorphicModelConverter.java:77)
	at org.springdoc.core.converters.PageableOpenAPIConverter.resolve(PageableOpenAPIConverter.java:93)
	at org.springdoc.core.converters.SortOpenAPIConverter.resolve(SortOpenAPIConverter.java:83)
	at io.swagger.v3.core.converter.ModelConverterContextImpl.resolve(ModelConverterContextImpl.java:97)
	at io.swagger.v3.core.converter.ModelConverters.resolveAsResolvedSchema(ModelConverters.java:110)
	at org.springdoc.core.utils.SpringDocAnnotationsUtils.extractSchema(SpringDocAnnotationsUtils.java:122)
	at org.springdoc.core.service.GenericResponseService.calculateSchema(GenericResponseService.java:553)
	at org.springdoc.core.service.GenericResponseService.buildApiResponses(GenericResponseService.java:604)
	at org.springdoc.core.service.GenericResponseService.buildGenericApiResponses(GenericResponseService.java:410)
	at org.springdoc.core.service.GenericResponseService.buildGenericResponse(GenericResponseService.java:322)
	at org.springdoc.api.AbstractOpenApiResource.getOpenApi(AbstractOpenApiResource.java:332)
	at org.springdoc.webmvc.api.OpenApiResource.openapiJson(OpenApiResource.java:124)
	at org.springdoc.webmvc.api.OpenApiWebMvcResource.openapiJson(OpenApiWebMvcResource.java:111)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:537)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.enterpriseintellijence.enterpriseintellijence.security.RequestFilter.doFilterInternal(RequestFilter.java:66)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1589)
23:49:24.374 [34mWARN [0;39m [35mo.s.c.u.SpringDocAnnotationsUtils[0;39m - Graceful exception occurred 
java.lang.IllegalArgumentException: Conflicting setter definitions for property "ifUnmodifiedSince": org.springframework.http.HttpHeaders#setIfUnmodifiedSince(1 params) vs org.springframework.http.HttpHeaders#setIfUnmodifiedSince(1 params)
	at com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getSetter(POJOPropertyBuilder.java:504)
	at io.swagger.v3.core.jackson.ModelResolver.ignore(ModelResolver.java:1089)
	at io.swagger.v3.core.jackson.ModelResolver.resolve(ModelResolver.java:583)
	at org.springdoc.core.converters.AdditionalModelsConverter.resolve(AdditionalModelsConverter.java:155)
	at org.springdoc.core.converters.FileSupportConverter.resolve(FileSupportConverter.java:69)
	at org.springdoc.core.converters.ResponseSupportConverter.resolve(ResponseSupportConverter.java:79)
	at org.springdoc.core.converters.SchemaPropertyDeprecatingConverter.resolve(SchemaPropertyDeprecatingConverter.java:92)
	at org.springdoc.core.converters.PolymorphicModelConverter.resolve(PolymorphicModelConverter.java:77)
	at org.springdoc.core.converters.PageableOpenAPIConverter.resolve(PageableOpenAPIConverter.java:93)
	at org.springdoc.core.converters.SortOpenAPIConverter.resolve(SortOpenAPIConverter.java:83)
	at io.swagger.v3.core.converter.ModelConverterContextImpl.resolve(ModelConverterContextImpl.java:97)
	at io.swagger.v3.core.jackson.ModelResolver.resolve(ModelResolver.java:659)
	at org.springdoc.core.converters.AdditionalModelsConverter.resolve(AdditionalModelsConverter.java:155)
	at org.springdoc.core.converters.FileSupportConverter.resolve(FileSupportConverter.java:69)
	at org.springdoc.core.converters.ResponseSupportConverter.resolve(ResponseSupportConverter.java:79)
	at org.springdoc.core.converters.SchemaPropertyDeprecatingConverter.resolve(SchemaPropertyDeprecatingConverter.java:92)
	at org.springdoc.core.converters.PolymorphicModelConverter.resolve(PolymorphicModelConverter.java:77)
	at org.springdoc.core.converters.PageableOpenAPIConverter.resolve(PageableOpenAPIConverter.java:93)
	at org.springdoc.core.converters.SortOpenAPIConverter.resolve(SortOpenAPIConverter.java:83)
	at io.swagger.v3.core.converter.ModelConverterContextImpl.resolve(ModelConverterContextImpl.java:97)
	at io.swagger.v3.core.converter.ModelConverters.resolveAsResolvedSchema(ModelConverters.java:110)
	at org.springdoc.core.utils.SpringDocAnnotationsUtils.extractSchema(SpringDocAnnotationsUtils.java:122)
	at org.springdoc.core.service.GenericResponseService.calculateSchema(GenericResponseService.java:553)
	at org.springdoc.core.service.GenericResponseService.buildContent(GenericResponseService.java:512)
	at org.springdoc.core.service.GenericResponseService.buildContent(GenericResponseService.java:493)
	at org.springdoc.core.service.GenericResponseService.buildApiResponses(GenericResponseService.java:585)
	at org.springdoc.core.service.GenericResponseService.buildGenericApiResponses(GenericResponseService.java:410)
	at org.springdoc.core.service.GenericResponseService.buildGenericResponse(GenericResponseService.java:322)
	at org.springdoc.api.AbstractOpenApiResource.getOpenApi(AbstractOpenApiResource.java:332)
	at org.springdoc.webmvc.api.OpenApiResource.openapiJson(OpenApiResource.java:124)
	at org.springdoc.webmvc.api.OpenApiWebMvcResource.openapiJson(OpenApiWebMvcResource.java:111)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:537)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.enterpriseintellijence.enterpriseintellijence.security.RequestFilter.doFilterInternal(RequestFilter.java:66)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1589)
23:49:24.402 [34mWARN [0;39m [35mo.s.c.u.SpringDocAnnotationsUtils[0;39m - Graceful exception occurred 
java.lang.IllegalArgumentException: Conflicting setter definitions for property "ifUnmodifiedSince": org.springframework.http.HttpHeaders#setIfUnmodifiedSince(1 params) vs org.springframework.http.HttpHeaders#setIfUnmodifiedSince(1 params)
	at com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getSetter(POJOPropertyBuilder.java:504)
	at io.swagger.v3.core.jackson.ModelResolver.ignore(ModelResolver.java:1089)
	at io.swagger.v3.core.jackson.ModelResolver.resolve(ModelResolver.java:583)
	at org.springdoc.core.converters.AdditionalModelsConverter.resolve(AdditionalModelsConverter.java:155)
	at org.springdoc.core.converters.FileSupportConverter.resolve(FileSupportConverter.java:69)
	at org.springdoc.core.converters.ResponseSupportConverter.resolve(ResponseSupportConverter.java:79)
	at org.springdoc.core.converters.SchemaPropertyDeprecatingConverter.resolve(SchemaPropertyDeprecatingConverter.java:92)
	at org.springdoc.core.converters.PolymorphicModelConverter.resolve(PolymorphicModelConverter.java:77)
	at org.springdoc.core.converters.PageableOpenAPIConverter.resolve(PageableOpenAPIConverter.java:93)
	at org.springdoc.core.converters.SortOpenAPIConverter.resolve(SortOpenAPIConverter.java:83)
	at io.swagger.v3.core.converter.ModelConverterContextImpl.resolve(ModelConverterContextImpl.java:97)
	at io.swagger.v3.core.jackson.ModelResolver.resolve(ModelResolver.java:659)
	at org.springdoc.core.converters.AdditionalModelsConverter.resolve(AdditionalModelsConverter.java:155)
	at org.springdoc.core.converters.FileSupportConverter.resolve(FileSupportConverter.java:69)
	at org.springdoc.core.converters.ResponseSupportConverter.resolve(ResponseSupportConverter.java:79)
	at org.springdoc.core.converters.SchemaPropertyDeprecatingConverter.resolve(SchemaPropertyDeprecatingConverter.java:92)
	at org.springdoc.core.converters.PolymorphicModelConverter.resolve(PolymorphicModelConverter.java:77)
	at org.springdoc.core.converters.PageableOpenAPIConverter.resolve(PageableOpenAPIConverter.java:93)
	at org.springdoc.core.converters.SortOpenAPIConverter.resolve(SortOpenAPIConverter.java:83)
	at io.swagger.v3.core.converter.ModelConverterContextImpl.resolve(ModelConverterContextImpl.java:97)
	at io.swagger.v3.core.converter.ModelConverters.resolveAsResolvedSchema(ModelConverters.java:110)
	at org.springdoc.core.utils.SpringDocAnnotationsUtils.extractSchema(SpringDocAnnotationsUtils.java:122)
	at org.springdoc.core.service.GenericResponseService.calculateSchema(GenericResponseService.java:553)
	at org.springdoc.core.service.GenericResponseService.buildApiResponses(GenericResponseService.java:604)
	at org.springdoc.core.service.GenericResponseService.buildGenericApiResponses(GenericResponseService.java:410)
	at org.springdoc.core.service.GenericResponseService.buildGenericResponse(GenericResponseService.java:322)
	at org.springdoc.api.AbstractOpenApiResource.getOpenApi(AbstractOpenApiResource.java:332)
	at org.springdoc.webmvc.api.OpenApiResource.openapiJson(OpenApiResource.java:124)
	at org.springdoc.webmvc.api.OpenApiWebMvcResource.openapiJson(OpenApiWebMvcResource.java:111)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:537)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.enterpriseintellijence.enterpriseintellijence.security.RequestFilter.doFilterInternal(RequestFilter.java:66)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1589)
23:49:24.438 [34mWARN [0;39m [35mo.s.c.u.SpringDocAnnotationsUtils[0;39m - Graceful exception occurred 
java.lang.IllegalArgumentException: Conflicting setter definitions for property "ifUnmodifiedSince": org.springframework.http.HttpHeaders#setIfUnmodifiedSince(1 params) vs org.springframework.http.HttpHeaders#setIfUnmodifiedSince(1 params)
	at com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getSetter(POJOPropertyBuilder.java:504)
	at io.swagger.v3.core.jackson.ModelResolver.ignore(ModelResolver.java:1089)
	at io.swagger.v3.core.jackson.ModelResolver.resolve(ModelResolver.java:583)
	at org.springdoc.core.converters.AdditionalModelsConverter.resolve(AdditionalModelsConverter.java:155)
	at org.springdoc.core.converters.FileSupportConverter.resolve(FileSupportConverter.java:69)
	at org.springdoc.core.converters.ResponseSupportConverter.resolve(ResponseSupportConverter.java:79)
	at org.springdoc.core.converters.SchemaPropertyDeprecatingConverter.resolve(SchemaPropertyDeprecatingConverter.java:92)
	at org.springdoc.core.converters.PolymorphicModelConverter.resolve(PolymorphicModelConverter.java:77)
	at org.springdoc.core.converters.PageableOpenAPIConverter.resolve(PageableOpenAPIConverter.java:93)
	at org.springdoc.core.converters.SortOpenAPIConverter.resolve(SortOpenAPIConverter.java:83)
	at io.swagger.v3.core.converter.ModelConverterContextImpl.resolve(ModelConverterContextImpl.java:97)
	at io.swagger.v3.core.jackson.ModelResolver.resolve(ModelResolver.java:659)
	at org.springdoc.core.converters.AdditionalModelsConverter.resolve(AdditionalModelsConverter.java:155)
	at org.springdoc.core.converters.FileSupportConverter.resolve(FileSupportConverter.java:69)
	at org.springdoc.core.converters.ResponseSupportConverter.resolve(ResponseSupportConverter.java:79)
	at org.springdoc.core.converters.SchemaPropertyDeprecatingConverter.resolve(SchemaPropertyDeprecatingConverter.java:92)
	at org.springdoc.core.converters.PolymorphicModelConverter.resolve(PolymorphicModelConverter.java:77)
	at org.springdoc.core.converters.PageableOpenAPIConverter.resolve(PageableOpenAPIConverter.java:93)
	at org.springdoc.core.converters.SortOpenAPIConverter.resolve(SortOpenAPIConverter.java:83)
	at io.swagger.v3.core.converter.ModelConverterContextImpl.resolve(ModelConverterContextImpl.java:97)
	at io.swagger.v3.core.converter.ModelConverters.resolveAsResolvedSchema(ModelConverters.java:110)
	at org.springdoc.core.utils.SpringDocAnnotationsUtils.extractSchema(SpringDocAnnotationsUtils.java:122)
	at org.springdoc.core.service.GenericResponseService.calculateSchema(GenericResponseService.java:553)
	at org.springdoc.core.service.GenericResponseService.buildContent(GenericResponseService.java:512)
	at org.springdoc.core.service.GenericResponseService.buildContent(GenericResponseService.java:493)
	at org.springdoc.core.service.GenericResponseService.buildApiResponses(GenericResponseService.java:585)
	at org.springdoc.core.service.GenericResponseService.buildGenericApiResponses(GenericResponseService.java:410)
	at org.springdoc.core.service.GenericResponseService.buildGenericResponse(GenericResponseService.java:322)
	at org.springdoc.api.AbstractOpenApiResource.getOpenApi(AbstractOpenApiResource.java:332)
	at org.springdoc.webmvc.api.OpenApiResource.openapiJson(OpenApiResource.java:124)
	at org.springdoc.webmvc.api.OpenApiWebMvcResource.openapiJson(OpenApiWebMvcResource.java:111)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:537)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.enterpriseintellijence.enterpriseintellijence.security.RequestFilter.doFilterInternal(RequestFilter.java:66)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1589)
23:49:24.475 [34mWARN [0;39m [35mo.s.c.u.SpringDocAnnotationsUtils[0;39m - Graceful exception occurred 
java.lang.IllegalArgumentException: Conflicting setter definitions for property "ifUnmodifiedSince": org.springframework.http.HttpHeaders#setIfUnmodifiedSince(1 params) vs org.springframework.http.HttpHeaders#setIfUnmodifiedSince(1 params)
	at com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getSetter(POJOPropertyBuilder.java:504)
	at io.swagger.v3.core.jackson.ModelResolver.ignore(ModelResolver.java:1089)
	at io.swagger.v3.core.jackson.ModelResolver.resolve(ModelResolver.java:583)
	at org.springdoc.core.converters.AdditionalModelsConverter.resolve(AdditionalModelsConverter.java:155)
	at org.springdoc.core.converters.FileSupportConverter.resolve(FileSupportConverter.java:69)
	at org.springdoc.core.converters.ResponseSupportConverter.resolve(ResponseSupportConverter.java:79)
	at org.springdoc.core.converters.SchemaPropertyDeprecatingConverter.resolve(SchemaPropertyDeprecatingConverter.java:92)
	at org.springdoc.core.converters.PolymorphicModelConverter.resolve(PolymorphicModelConverter.java:77)
	at org.springdoc.core.converters.PageableOpenAPIConverter.resolve(PageableOpenAPIConverter.java:93)
	at org.springdoc.core.converters.SortOpenAPIConverter.resolve(SortOpenAPIConverter.java:83)
	at io.swagger.v3.core.converter.ModelConverterContextImpl.resolve(ModelConverterContextImpl.java:97)
	at io.swagger.v3.core.jackson.ModelResolver.resolve(ModelResolver.java:659)
	at org.springdoc.core.converters.AdditionalModelsConverter.resolve(AdditionalModelsConverter.java:155)
	at org.springdoc.core.converters.FileSupportConverter.resolve(FileSupportConverter.java:69)
	at org.springdoc.core.converters.ResponseSupportConverter.resolve(ResponseSupportConverter.java:79)
	at org.springdoc.core.converters.SchemaPropertyDeprecatingConverter.resolve(SchemaPropertyDeprecatingConverter.java:92)
	at org.springdoc.core.converters.PolymorphicModelConverter.resolve(PolymorphicModelConverter.java:77)
	at org.springdoc.core.converters.PageableOpenAPIConverter.resolve(PageableOpenAPIConverter.java:93)
	at org.springdoc.core.converters.SortOpenAPIConverter.resolve(SortOpenAPIConverter.java:83)
	at io.swagger.v3.core.converter.ModelConverterContextImpl.resolve(ModelConverterContextImpl.java:97)
	at io.swagger.v3.core.converter.ModelConverters.resolveAsResolvedSchema(ModelConverters.java:110)
	at org.springdoc.core.utils.SpringDocAnnotationsUtils.extractSchema(SpringDocAnnotationsUtils.java:122)
	at org.springdoc.core.service.GenericResponseService.calculateSchema(GenericResponseService.java:553)
	at org.springdoc.core.service.GenericResponseService.buildApiResponses(GenericResponseService.java:604)
	at org.springdoc.core.service.GenericResponseService.buildGenericApiResponses(GenericResponseService.java:410)
	at org.springdoc.core.service.GenericResponseService.buildGenericResponse(GenericResponseService.java:322)
	at org.springdoc.api.AbstractOpenApiResource.getOpenApi(AbstractOpenApiResource.java:332)
	at org.springdoc.webmvc.api.OpenApiResource.openapiJson(OpenApiResource.java:124)
	at org.springdoc.webmvc.api.OpenApiWebMvcResource.openapiJson(OpenApiWebMvcResource.java:111)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:578)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:207)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:152)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:884)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1081)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:537)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.enterpriseintellijence.enterpriseintellijence.security.RequestFilter.doFilterInternal(RequestFilter.java:66)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1589)
23:49:25.599 [34mINFO [0;39m [35mo.s.api.AbstractOpenApiResource[0;39m - Init duration for springdoc-openapi is: 1631 ms 
23:49:25.624 [34mINFO [0;39m [35mmyLogger[0;39m - 
FINISHED PROCESSING : METHOD={GET}; REQUESTURI={/v3/api-docs}; REMOTEADDR={127.0.0.1};
REQUEST PAYLOAD={};
LOGGED USERNAME={}; RESPONSE CODE={200};
RESPONSE={{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "OpenAPI definition",
    "version" : "v0"
  },
  "servers" : [ {
    "url" : "http://localhost:8080",
    "description" : "Generated server url"
  } ],
  "paths" : {
    "/api/v1/superAdmin/size/{sizeId}" : {
      "put" : {
        "tags" : [ "super-admin-controller" ],
        "operationId" : "replaceSize",
        "parameters" : [ {
          "name" : "sizeId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SizeDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SizeDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "super-admin-controller" ],
        "operationId" : "deleteSize",
        "parameters" : [ {
          "name" : "sizeId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/superAdmin/categories/{catId}" : {
      "put" : {
        "tags" : [ "super-admin-controller" ],
        "operationId" : "replaceProductCategory",
        "parameters" : [ {
          "name" : "catId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductCategoryDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductCategoryDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "super-admin-controller" ],
        "operationId" : "productCategoryEnableOrDisable",
        "parameters" : [ {
          "name" : "catId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "super-admin-controller" ],
        "operationId" : "deleteCategory",
        "parameters" : [ {
          "name" : "catId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/reviews/{id}" : {
      "get" : {
        "tags" : [ "review-controller" ],
        "operationId" : "reviewById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReviewDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "review-controller" ],
        "operationId" : "updateReview",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReviewDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReviewDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "review-controller" ],
        "operationId" : "deleteReview",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/reports/{id}" : {
      "put" : {
        "tags" : [ "report-controller" ],
        "operationId" : "updateReport",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/{id}" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "productById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/ProductDTO"
                  }, {
                    "$ref" : "#/components/schemas/ClothingDTO"
                  }, {
                    "$ref" : "#/components/schemas/EntertainmentDTO"
                  }, {
                    "$ref" : "#/components/schemas/HomeDTO"
                  } ]
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "product-controller" ],
        "operationId" : "updateProduct",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "$ref" : "#/components/schemas/ProductDTO"
                }, {
                  "$ref" : "#/components/schemas/ClothingDTO"
                }, {
                  "$ref" : "#/components/schemas/EntertainmentDTO"
                }, {
                  "$ref" : "#/components/schemas/HomeDTO"
                } ]
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/ProductDTO"
                  }, {
                    "$ref" : "#/components/schemas/ClothingDTO"
                  }, {
                    "$ref" : "#/components/schemas/EntertainmentDTO"
                  }, {
                    "$ref" : "#/components/schemas/HomeDTO"
                  } ]
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "product-controller" ],
        "operationId" : "deleteProduct",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/payment-methods/{id}" : {
      "get" : {
        "tags" : [ "payment-method-controller" ],
        "operationId" : "getPaymentMethod",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentMethodDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "payment-method-controller" ],
        "operationId" : "updatePaymentMethod",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentMethodDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentMethodDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "payment-method-controller" ],
        "operationId" : "deletePaymentMethod",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/orders/{id}" : {
      "get" : {
        "tags" : [ "order-controller" ],
        "operationId" : "getOrder",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "order-controller" ],
        "operationId" : "updateOrder",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrderDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "order-controller" ],
        "operationId" : "deleteOrder",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/images/users/photo-profile/{id}" : {
      "put" : {
        "tags" : [ "image-controller" ],
        "operationId" : "replacePhotoUser",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "multipartFile" : {
                    "type" : "string",
                    "format" : "binary"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "image-controller" ],
        "operationId" : "deletePhotoUser",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/images/product/{id}" : {
      "put" : {
        "tags" : [ "image-controller" ],
        "operationId" : "replaceImageProduct",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "multipartFile" : {
                    "type" : "string",
                    "format" : "binary"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "image-controller" ],
        "operationId" : "deleteImageProduct",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/deliveries/{id}" : {
      "get" : {
        "tags" : [ "delivery-controller" ],
        "operationId" : "getDelivery",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeliveryDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "delivery-controller" ],
        "operationId" : "updateDelivery",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeliveryDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeliveryDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/deliveries/address/{id}" : {
      "get" : {
        "tags" : [ "delivery-controller" ],
        "operationId" : "getAddress",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddressDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "delivery-controller" ],
        "operationId" : "updateAddress",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddressDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddressDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "delivery-controller" ],
        "operationId" : "deleteAddress",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/admin/products/" : {
      "put" : {
        "tags" : [ "admin-controller" ],
        "operationId" : "updateProduct_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "$ref" : "#/components/schemas/ProductDTO"
                }, {
                  "$ref" : "#/components/schemas/ClothingDTO"
                }, {
                  "$ref" : "#/components/schemas/EntertainmentDTO"
                }, {
                  "$ref" : "#/components/schemas/HomeDTO"
                } ]
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/ProductDTO"
                  }, {
                    "$ref" : "#/components/schemas/ClothingDTO"
                  }, {
                    "$ref" : "#/components/schemas/EntertainmentDTO"
                  }, {
                    "$ref" : "#/components/schemas/HomeDTO"
                  } ]
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/userHoliday" : {
      "post" : {
        "tags" : [ "user-controller" ],
        "operationId" : "userHoliday",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/unlike/{id}" : {
      "post" : {
        "tags" : [ "user-controller" ],
        "operationId" : "unlike",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/register" : {
      "post" : {
        "tags" : [ "user-controller" ],
        "operationId" : "register",
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "email",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "password",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/logout" : {
      "post" : {
        "tags" : [ "user-controller" ],
        "operationId" : "logout",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/login-with-keycloak" : {
      "post" : {
        "tags" : [ "user-controller" ],
        "operationId" : "loginWithKeycloak",
        "parameters" : [ {
          "name" : "body",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/login-with-google" : {
      "post" : {
        "tags" : [ "user-controller" ],
        "operationId" : "loginWithGoogle",
        "parameters" : [ {
          "name" : "body",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/LoginWithGoogleBody"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/like/{id}" : {
      "post" : {
        "tags" : [ "user-controller" ],
        "operationId" : "like",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/keycloak-auth" : {
      "post" : {
        "tags" : [ "user-controller" ],
        "operationId" : "keycloakAuth",
        "parameters" : [ {
          "name" : "idTokenString",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/google-auth" : {
      "post" : {
        "tags" : [ "user-controller" ],
        "operationId" : "googleAuth",
        "parameters" : [ {
          "name" : "idTokenString",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/changePassword" : {
      "post" : {
        "tags" : [ "user-controller" ],
        "operationId" : "changePassword",
        "parameters" : [ {
          "name" : "oldPassword",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "newPassword",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/authenticate" : {
      "post" : {
        "tags" : [ "user-controller" ],
        "operationId" : "authenticate",
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "password",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/transactions" : {
      "get" : {
        "tags" : [ "transaction-controller" ],
        "operationId" : "allTransaction",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "transaction-controller" ],
        "operationId" : "createTransaction",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TransactionCreateDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TransactionDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/superAdmin/users/changeRole" : {
      "post" : {
        "tags" : [ "super-admin-controller" ],
        "operationId" : "changeRole",
        "parameters" : [ {
          "name" : "userId",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "role",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "ADMIN", "USER", "SUPER_ADMIN" ]
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/superAdmin/size" : {
      "post" : {
        "tags" : [ "super-admin-controller" ],
        "operationId" : "createNewSize",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SizeDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SizeDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/superAdmin/categories" : {
      "post" : {
        "tags" : [ "super-admin-controller" ],
        "operationId" : "createNewCategory",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductCategoryDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductCategoryDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/reviews" : {
      "post" : {
        "tags" : [ "review-controller" ],
        "operationId" : "createReview",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReviewCreateDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReviewDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/reports" : {
      "get" : {
        "tags" : [ "report-controller" ],
        "operationId" : "getReportsByStatus",
        "parameters" : [ {
          "name" : "status",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "PENDING", "CLOSED" ]
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageReportDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "report-controller" ],
        "operationId" : "createReport",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReportDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/reports/close/{id}" : {
      "post" : {
        "tags" : [ "report-controller" ],
        "operationId" : "closeReport",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products" : {
      "post" : {
        "tags" : [ "product-controller" ],
        "operationId" : "createProduct",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "$ref" : "#/components/schemas/ProductCreateDTO"
                }, {
                  "$ref" : "#/components/schemas/ClothingCreateDTO"
                }, {
                  "$ref" : "#/components/schemas/EntertainmentCreateDTO"
                }, {
                  "$ref" : "#/components/schemas/HomeCreateDTO"
                } ]
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/ProductDTO"
                  }, {
                    "$ref" : "#/components/schemas/ClothingDTO"
                  }, {
                    "$ref" : "#/components/schemas/EntertainmentDTO"
                  }, {
                    "$ref" : "#/components/schemas/HomeDTO"
                  } ]
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/capability/{productId}" : {
      "post" : {
        "tags" : [ "product-controller" ],
        "operationId" : "createCapability",
        "parameters" : [ {
          "name" : "productId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CapabilityDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/payment-methods" : {
      "get" : {
        "tags" : [ "payment-method-controller" ],
        "operationId" : "getMyPaymentMethods",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagePaymentMethodBasicDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "payment-method-controller" ],
        "operationId" : "createPaymentMethod",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentMethodCreateDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentMethodDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/orders" : {
      "post" : {
        "tags" : [ "order-controller" ],
        "operationId" : "createOrder",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrderCreateDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/offers" : {
      "post" : {
        "tags" : [ "offer-controller" ],
        "operationId" : "createOffer",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OfferCreateDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OfferDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/notifications/" : {
      "get" : {
        "tags" : [ "notification-controller" ],
        "operationId" : "getAllUserNotifications",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "sizePage",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageNotificationDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "notification-controller" ],
        "operationId" : "readNotification",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NotificationDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/messages" : {
      "post" : {
        "tags" : [ "message-controller" ],
        "operationId" : "createMessage",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MessageCreateDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessageDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/messages/read" : {
      "post" : {
        "tags" : [ "message-controller" ],
        "operationId" : "setReadMessages",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/images/users/photo-profile" : {
      "post" : {
        "tags" : [ "image-controller" ],
        "operationId" : "savePhotoUser",
        "parameters" : [ {
          "name" : "description",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "multipartFile" : {
                    "type" : "string",
                    "format" : "binary"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserImageDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/images/product" : {
      "post" : {
        "tags" : [ "image-controller" ],
        "operationId" : "saveImageProduct",
        "parameters" : [ {
          "name" : "product_id",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "description",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "multipartFile" : {
                    "type" : "string",
                    "format" : "binary"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductImageDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/follow/{userId}" : {
      "post" : {
        "tags" : [ "following-controller" ],
        "operationId" : "follow",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FollowingFollowersDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "following-controller" ],
        "operationId" : "unfollow",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/deliveries" : {
      "post" : {
        "tags" : [ "delivery-controller" ],
        "operationId" : "createDelivery",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeliveryCreateDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeliveryDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/deliveries/address" : {
      "get" : {
        "tags" : [ "delivery-controller" ],
        "operationId" : "getMyAddressList",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "delivery-controller" ],
        "operationId" : "createAddress",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddressCreateDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddressDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/admin/users/unban/{userId}" : {
      "post" : {
        "tags" : [ "admin-controller" ],
        "operationId" : "unbanUser",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/admin/users/ban/{userId}" : {
      "post" : {
        "tags" : [ "admin-controller" ],
        "operationId" : "banUser",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/{id}" : {
      "get" : {
        "tags" : [ "user-controller" ],
        "operationId" : "userById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserBasicDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "user-controller" ],
        "operationId" : "deleteUser",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "user-controller" ],
        "operationId" : "updateUser",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/offers/{id}/state" : {
      "patch" : {
        "tags" : [ "offer-controller" ],
        "operationId" : "setOfferState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string",
                "enum" : [ "PENDING", "ACCEPTED", "REJECTED", "CANCELLED" ]
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OfferDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/offers/{id}/reject" : {
      "patch" : {
        "tags" : [ "offer-controller" ],
        "operationId" : "rejectOffer",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OfferDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/offers/{id}/cancel" : {
      "patch" : {
        "tags" : [ "offer-controller" ],
        "operationId" : "cancelOffer",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OfferDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/offers/{id}/accept" : {
      "patch" : {
        "tags" : [ "offer-controller" ],
        "operationId" : "acceptOffer",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OfferDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/search-by-username" : {
      "get" : {
        "tags" : [ "user-controller" ],
        "operationId" : "searchByUsername",
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageUserBasicDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/resetPassword" : {
      "get" : {
        "tags" : [ "user-controller" ],
        "operationId" : "resetPassword",
        "parameters" : [ {
          "name" : "email",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/refreshToken" : {
      "get" : {
        "tags" : [ "user-controller" ],
        "operationId" : "refreshToken",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/me" : {
      "get" : {
        "tags" : [ "user-controller" ],
        "operationId" : "me",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/me/orders" : {
      "get" : {
        "tags" : [ "user-controller" ],
        "operationId" : "getMyOrders",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageOrderBasicDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/me/offers" : {
      "get" : {
        "tags" : [ "user-controller" ],
        "operationId" : "getMyOffers",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageOfferBasicDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/liked/" : {
      "get" : {
        "tags" : [ "user-controller" ],
        "operationId" : "getLikedProducts",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageProductBasicDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/getNewPassword" : {
      "get" : {
        "tags" : [ "user-controller" ],
        "operationId" : "resetPasswordToken",
        "parameters" : [ {
          "name" : "token",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/find-by-username" : {
      "get" : {
        "tags" : [ "user-controller" ],
        "operationId" : "findByUsername",
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserBasicDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/default-address" : {
      "get" : {
        "tags" : [ "user-controller" ],
        "operationId" : "getDefaultAddress",
        "parameters" : [ {
          "name" : "userId",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddressDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/activate" : {
      "get" : {
        "tags" : [ "user-controller" ],
        "operationId" : "activate",
        "parameters" : [ {
          "name" : "token",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/transactions/{id}" : {
      "get" : {
        "tags" : [ "transaction-controller" ],
        "operationId" : "transactionById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TransactionDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/reviews/{userId}/sent" : {
      "get" : {
        "tags" : [ "review-controller" ],
        "operationId" : "allReviewSent",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "sizePage",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageReviewDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/reviews/{userId}/received" : {
      "get" : {
        "tags" : [ "review-controller" ],
        "operationId" : "allReviewReceived",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "sizePage",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageReviewDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/reports/working" : {
      "get" : {
        "tags" : [ "report-controller" ],
        "operationId" : "getReportsMeManaging",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageReportDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/{id}/offers" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getProductOffers",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageOfferBasicDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/{id}/messages" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getProductMessages",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageMessageDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/tertiaryCategories/{secondary}" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getTertiaryCategoriesList",
        "parameters" : [ {
          "name" : "secondary",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/sizes" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getSizesList",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/sizes/{category}" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getSizesListByCategory",
        "parameters" : [ {
          "name" : "category",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/secondaryCategories/{primary}" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getSecondaryCategoriesList",
        "parameters" : [ {
          "name" : "primary",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/primaryCategories" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getPrimaryCategoriesList",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/me" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getMyProducts",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageProductBasicDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/likes/users/{productId}" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getUsersThatLikedProduct",
        "parameters" : [ {
          "name" : "productId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/filter" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getFilteredProducts",
        "parameters" : [ {
          "name" : "title",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "description",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "minProductCost",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "number",
            "format" : "double"
          }
        }, {
          "name" : "maxProductCost",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "number",
            "format" : "double"
          }
        }, {
          "name" : "brands",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "condition",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "NEW_WITH_TAG", "NEW_WITHOUT_TAG", "VERY_GOOD", "GOOD", "ACCEPTABLE" ]
            }
          }
        }, {
          "name" : "views",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "userId",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "uploadDate",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "availability",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "AVAILABLE", "PENDING", "UNAVAILABLE" ]
          }
        }, {
          "name" : "productCategory",
          "in" : "query",
          "required" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ProductCategory"
          }
        }, {
          "name" : "primaryCat",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "secondaryCat",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tertiaryCat",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "likesNumber",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "productGender",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "MALE", "FEMALE", "UNISEX" ]
          }
        }, {
          "name" : "sizes",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "colour",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "YELLOW", "GREEN", "BLUE", "RED", "BLACK", "WHITE", "MULTICOLOUR" ]
          }
        }, {
          "name" : "entertainmentLanguage",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "MULTI_LANGUAGE", "ITALIAN", "FRENCH", "GERMAN", "ENGLISH", "SPANISH", "OTHERS" ]
          }
        }, {
          "name" : "homeMaterial",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "Cotton", "Linen", "Wool", "Acrylic", "Chiffon", "Polyamide_Nylon", "Polyester", "Silk", "Ceramic", "Glass", "Stainless_Steel", "Plastic", "Wood", "Stone", "Porcelain", "Silver", "Metal", "Other" ]
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "sizePage",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "uploadDate"
          }
        }, {
          "name" : "sortDirection",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "DESC"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageProductBasicDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/category/{category}" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getCategoryId",
        "parameters" : [ {
          "name" : "category",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/categories" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getCategoriesList",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/categories/clothing/gender" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getProductGender",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/capability/{token}" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getProductFromCapability",
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/ProductDTO"
                  }, {
                    "$ref" : "#/components/schemas/ClothingDTO"
                  }, {
                    "$ref" : "#/components/schemas/EntertainmentDTO"
                  }, {
                    "$ref" : "#/components/schemas/HomeDTO"
                  } ]
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/basic/{id}" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "productBasicById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductBasicDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/orders/me" : {
      "get" : {
        "tags" : [ "order-controller" ],
        "operationId" : "getAllOrdersOfUser",
        "parameters" : [ {
          "name" : "state",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "CANCELED", "PENDING", "PURCHASED", "SHIPPED", "DELIVERED", "COMPLETED", "REVIEWED" ]
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "sizePage",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageOrderBasicDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/orders/me/seller" : {
      "get" : {
        "tags" : [ "order-controller" ],
        "operationId" : "getAllOrdersOfSeller",
        "parameters" : [ {
          "name" : "state",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "CANCELED", "PENDING", "PURCHASED", "SHIPPED", "DELIVERED", "COMPLETED", "REVIEWED" ]
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "sizePage",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageOrderBasicDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/offers/{id}" : {
      "get" : {
        "tags" : [ "offer-controller" ],
        "operationId" : "getOffer",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OfferDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/messages/{id}" : {
      "get" : {
        "tags" : [ "message-controller" ],
        "operationId" : "getMessage",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessageDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "message-controller" ],
        "operationId" : "deleteMessage",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/messages/conversations" : {
      "get" : {
        "tags" : [ "message-controller" ],
        "operationId" : "getAllMyConversations",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ConversationDTO"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/messages/conversations/{conversationId}" : {
      "get" : {
        "tags" : [ "message-controller" ],
        "operationId" : "getConversationById",
        "parameters" : [ {
          "name" : "conversationId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/messages/conversations/{conversationId}/messages" : {
      "get" : {
        "tags" : [ "message-controller" ],
        "operationId" : "getConversationMessages",
        "parameters" : [ {
          "name" : "conversationId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "sizePage",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageMessageDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/messages/conversations/with/{userId}" : {
      "get" : {
        "tags" : [ "message-controller" ],
        "operationId" : "getConversationWithUser",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/me/following/{userId}" : {
      "get" : {
        "tags" : [ "following-controller" ],
        "operationId" : "imFollowingThisUser",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/ip" : {
      "get" : {
        "tags" : [ "demo-controller" ],
        "operationId" : "getIp",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/images/{type}/{folder_name}/{file_name}" : {
      "get" : {
        "tags" : [ "image-controller" ],
        "operationId" : "getImage",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "folder_name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "file_name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "image/png" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/following/{userId}" : {
      "get" : {
        "tags" : [ "following-controller" ],
        "operationId" : "getFollowingByUser",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "sizePage",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageFollowingFollowersDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/followers/{userId}" : {
      "get" : {
        "tags" : [ "following-controller" ],
        "operationId" : "getFollowersOfUser",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "sizePage",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageFollowingFollowersDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/admin/users" : {
      "get" : {
        "tags" : [ "admin-controller" ],
        "operationId" : "getUsers",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "userRole",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "ADMIN", "USER", "SUPER_ADMIN" ]
          }
        }, {
          "name" : "username",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageUserDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/admin/products/{productId}" : {
      "get" : {
        "tags" : [ "admin-controller" ],
        "operationId" : "getProduct",
        "parameters" : [ {
          "name" : "productId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/ProductDTO"
                  }, {
                    "$ref" : "#/components/schemas/ClothingDTO"
                  }, {
                    "$ref" : "#/components/schemas/EntertainmentDTO"
                  }, {
                    "$ref" : "#/components/schemas/HomeDTO"
                  } ]
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "admin-controller" ],
        "operationId" : "deleteProduct_1",
        "parameters" : [ {
          "name" : "productId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/demo" : {
      "get" : {
        "tags" : [ "demo-controller" ],
        "operationId" : "createDemoData",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        }
      },
      "put" : {
        "tags" : [ "demo-controller" ],
        "operationId" : "createDemoData_3",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        }
      },
      "post" : {
        "tags" : [ "demo-controller" ],
        "operationId" : "createDemoData_2",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "tags" : [ "demo-controller" ],
        "operationId" : "createDemoData_5",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        }
      },
      "options" : {
        "tags" : [ "demo-controller" ],
        "operationId" : "createDemoData_6",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        }
      },
      "head" : {
        "tags" : [ "demo-controller" ],
        "operationId" : "createDemoData_1",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        }
      },
      "patch" : {
        "tags" : [ "demo-controller" ],
        "operationId" : "createDemoData_4",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "SizeDTO" : {
        "required" : [ "sizeName", "type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "sizeName" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "ProductCategoryDTO" : {
        "required" : [ "primaryCat", "secondaryCat", "tertiaryCat" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "primaryCat" : {
            "type" : "string"
          },
          "secondaryCat" : {
            "type" : "string"
          },
          "tertiaryCat" : {
            "type" : "string"
          }
        }
      },
      "ReviewDTO" : {
        "required" : [ "id", "reviewed", "reviewer", "title", "vote" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "date" : {
            "type" : "string",
            "format" : "date-time"
          },
          "title" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "vote" : {
            "maximum" : 5,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "reviewer" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          },
          "reviewed" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          }
        }
      },
      "UserBasicDTO" : {
        "required" : [ "id", "username" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "username" : {
            "type" : "string"
          },
          "bio" : {
            "type" : "string"
          },
          "photoProfile" : {
            "$ref" : "#/components/schemas/UserImageDTO"
          },
          "reviewsTotalSum" : {
            "type" : "integer",
            "format" : "int32"
          },
          "reviewsNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "followersNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "followingNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "BANNED", "HIDDEN", "HOLIDAY", "CANCELLED" ]
          }
        }
      },
      "UserImageDTO" : {
        "required" : [ "urlPhoto" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "urlPhoto" : {
            "type" : "string"
          }
        }
      },
      "CustomMoneyDTO" : {
        "required" : [ "currency", "price" ],
        "type" : "object",
        "properties" : {
          "price" : {
            "type" : "number",
            "format" : "double"
          },
          "currency" : {
            "type" : "string",
            "enum" : [ "EUR", "USD" ]
          }
        }
      },
      "ProductBasicDTO" : {
        "required" : [ "deliveryCost", "id", "productCost" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "uploadDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "productCost" : {
            "$ref" : "#/components/schemas/CustomMoneyDTO"
          },
          "deliveryCost" : {
            "$ref" : "#/components/schemas/CustomMoneyDTO"
          },
          "brand" : {
            "type" : "string"
          },
          "condition" : {
            "type" : "string",
            "enum" : [ "NEW_WITH_TAG", "NEW_WITHOUT_TAG", "VERY_GOOD", "GOOD", "ACCEPTABLE" ]
          },
          "likesNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "seller" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          },
          "productImages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductImageDTO"
            }
          },
          "productCategory" : {
            "$ref" : "#/components/schemas/ProductCategoryDTO"
          }
        }
      },
      "ProductImageDTO" : {
        "required" : [ "urlPhoto" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "urlPhoto" : {
            "type" : "string"
          }
        }
      },
      "ReportDTO" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "reporterUser" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          },
          "description" : {
            "type" : "string"
          },
          "reportedUser" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          },
          "reportedProduct" : {
            "$ref" : "#/components/schemas/ProductBasicDTO"
          },
          "date" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "PENDING", "CLOSED" ]
          },
          "adminFollowedReport" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          }
        }
      },
      "ClothingDTO" : {
        "required" : [ "availability", "clothingSize", "colour", "condition", "deliveryCost", "id", "productCategory", "productCost", "productGender", "productSize", "seller", "title", "visibility" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProductDTO"
        }, {
          "type" : "object",
          "properties" : {
            "productGender" : {
              "type" : "string",
              "enum" : [ "MALE", "FEMALE", "UNISEX" ]
            },
            "clothingSize" : {
              "$ref" : "#/components/schemas/SizeDTO"
            },
            "colour" : {
              "type" : "string",
              "enum" : [ "YELLOW", "GREEN", "BLUE", "RED", "BLACK", "WHITE", "MULTICOLOUR" ]
            }
          }
        } ]
      },
      "EntertainmentDTO" : {
        "required" : [ "availability", "condition", "deliveryCost", "entertainmentLanguage", "id", "productCategory", "productCost", "productSize", "seller", "title", "visibility" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProductDTO"
        }, {
          "type" : "object",
          "properties" : {
            "entertainmentLanguage" : {
              "type" : "string",
              "enum" : [ "MULTI_LANGUAGE", "ITALIAN", "FRENCH", "GERMAN", "ENGLISH", "SPANISH", "OTHERS" ]
            }
          }
        } ]
      },
      "HomeDTO" : {
        "required" : [ "availability", "colour", "condition", "deliveryCost", "homeMaterial", "homeSize", "id", "productCategory", "productCost", "productSize", "seller", "title", "visibility" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProductDTO"
        }, {
          "type" : "object",
          "properties" : {
            "colour" : {
              "type" : "string",
              "enum" : [ "YELLOW", "GREEN", "BLUE", "RED", "BLACK", "WHITE", "MULTICOLOUR" ]
            },
            "homeSize" : {
              "$ref" : "#/components/schemas/SizeDTO"
            },
            "homeMaterial" : {
              "type" : "string",
              "enum" : [ "Cotton", "Linen", "Wool", "Acrylic", "Chiffon", "Polyamide_Nylon", "Polyester", "Silk", "Ceramic", "Glass", "Stainless_Steel", "Plastic", "Wood", "Stone", "Porcelain", "Silver", "Metal", "Other" ]
            }
          }
        } ]
      },
      "ProductDTO" : {
        "required" : [ "availability", "condition", "deliveryCost", "id", "productCategory", "productCost", "productSize", "seller", "title", "type", "visibility" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "productCost" : {
            "$ref" : "#/components/schemas/CustomMoneyDTO"
          },
          "deliveryCost" : {
            "$ref" : "#/components/schemas/CustomMoneyDTO"
          },
          "brand" : {
            "type" : "string"
          },
          "condition" : {
            "type" : "string",
            "enum" : [ "NEW_WITH_TAG", "NEW_WITHOUT_TAG", "VERY_GOOD", "GOOD", "ACCEPTABLE" ]
          },
          "likesNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "seller" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          },
          "productSize" : {
            "type" : "string",
            "enum" : [ "BIG", "MEDIUM", "SMALL" ]
          },
          "views" : {
            "type" : "integer",
            "format" : "int32"
          },
          "uploadDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastUpdateDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "visibility" : {
            "type" : "string",
            "enum" : [ "PUBLIC", "PRIVATE" ]
          },
          "availability" : {
            "type" : "string",
            "enum" : [ "AVAILABLE", "PENDING", "UNAVAILABLE" ]
          },
          "productCategory" : {
            "$ref" : "#/components/schemas/ProductCategoryDTO"
          },
          "usersThatLiked" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserBasicDTO"
            }
          },
          "productImages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductImageDTO"
            }
          },
          "type" : {
            "type" : "string"
          }
        },
        "discriminator" : {
          "propertyName" : "type"
        }
      },
      "PaymentMethodDTO" : {
        "required" : [ "creditCard", "expiryDate", "id", "isDefault", "owner" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "creditCard" : {
            "type" : "string"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date"
          },
          "isDefault" : {
            "type" : "boolean"
          },
          "owner" : {
            "type" : "string"
          }
        }
      },
      "AddressDTO" : {
        "required" : [ "city", "country", "header", "id", "isDefault", "phoneNumber", "street", "zipCode" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "header" : {
            "type" : "string"
          },
          "country" : {
            "type" : "string"
          },
          "city" : {
            "type" : "string"
          },
          "street" : {
            "type" : "string"
          },
          "zipCode" : {
            "type" : "string"
          },
          "phoneNumber" : {
            "type" : "string"
          },
          "isDefault" : {
            "type" : "boolean"
          }
        }
      },
      "DeliveryDTO" : {
        "required" : [ "deliveryStatus", "receiverAddress", "sendTime", "senderAddress" ],
        "type" : "object",
        "properties" : {
          "sendTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "deliveredTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "deliveryCost" : {
            "$ref" : "#/components/schemas/CustomMoneyDTO"
          },
          "shipper" : {
            "type" : "string"
          },
          "deliveryStatus" : {
            "type" : "string",
            "enum" : [ "SHIPPED", "DELIVERED" ]
          },
          "senderAddress" : {
            "$ref" : "#/components/schemas/AddressDTO"
          },
          "receiverAddress" : {
            "$ref" : "#/components/schemas/AddressDTO"
          },
          "id" : {
            "type" : "string"
          }
        }
      },
      "OfferBasicDTO" : {
        "required" : [ "amount", "id", "state" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "amount" : {
            "$ref" : "#/components/schemas/CustomMoneyDTO"
          },
          "state" : {
            "type" : "string",
            "enum" : [ "PENDING", "ACCEPTED", "REJECTED", "CANCELLED" ]
          },
          "creationTime" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "OrderDTO" : {
        "required" : [ "id", "product", "state", "user" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "state" : {
            "type" : "string",
            "enum" : [ "CANCELED", "PENDING", "PURCHASED", "SHIPPED", "DELIVERED", "COMPLETED", "REVIEWED" ]
          },
          "orderDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "orderUpdateDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "product" : {
            "$ref" : "#/components/schemas/ProductBasicDTO"
          },
          "user" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          },
          "delivery" : {
            "$ref" : "#/components/schemas/DeliveryDTO"
          },
          "deliveryAddress" : {
            "$ref" : "#/components/schemas/AddressDTO"
          },
          "offer" : {
            "$ref" : "#/components/schemas/OfferBasicDTO"
          },
          "transaction" : {
            "$ref" : "#/components/schemas/TransactionDTO"
          }
        }
      },
      "TransactionDTO" : {
        "required" : [ "amount", "id", "paymentMethod", "paymentMethodOwner", "transactionState" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "creationTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amount" : {
            "$ref" : "#/components/schemas/CustomMoneyDTO"
          },
          "transactionState" : {
            "type" : "string",
            "enum" : [ "REJECTED", "COMPLETED" ]
          },
          "paymentMethod" : {
            "type" : "string"
          },
          "paymentMethodOwner" : {
            "type" : "string"
          }
        }
      },
      "LoginWithGoogleBody" : {
        "type" : "object",
        "properties" : {
          "credential" : {
            "type" : "string"
          },
          "g_csrf_token" : {
            "type" : "string"
          }
        }
      },
      "OrderBasicDTO" : {
        "required" : [ "id", "product", "state" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "state" : {
            "type" : "string",
            "enum" : [ "CANCELED", "PENDING", "PURCHASED", "SHIPPED", "DELIVERED", "COMPLETED", "REVIEWED" ]
          },
          "orderDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "orderUpdateDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "product" : {
            "$ref" : "#/components/schemas/ProductBasicDTO"
          },
          "offer" : {
            "$ref" : "#/components/schemas/OfferBasicDTO"
          }
        }
      },
      "PaymentMethodBasicDTO" : {
        "required" : [ "creditCard", "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "creditCard" : {
            "type" : "string"
          },
          "default" : {
            "type" : "boolean"
          }
        }
      },
      "TransactionCreateDTO" : {
        "required" : [ "order", "paymentMethod" ],
        "type" : "object",
        "properties" : {
          "paymentMethod" : {
            "$ref" : "#/components/schemas/PaymentMethodBasicDTO"
          },
          "order" : {
            "$ref" : "#/components/schemas/OrderBasicDTO"
          }
        }
      },
      "UserDTO" : {
        "required" : [ "email", "id", "provider", "role", "status", "username" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "username" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "bio" : {
            "type" : "string"
          },
          "photoProfile" : {
            "$ref" : "#/components/schemas/UserImageDTO"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "LOCAL", "KEYCLOAK", "GOOGLE" ]
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "BANNED", "HIDDEN", "HOLIDAY", "CANCELLED" ]
          },
          "addresses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AddressDTO"
            }
          },
          "paymentMethods" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentMethodDTO"
            }
          },
          "role" : {
            "type" : "string",
            "enum" : [ "ADMIN", "USER", "SUPER_ADMIN" ]
          },
          "reviewsTotalSum" : {
            "type" : "integer",
            "format" : "int32"
          },
          "reviewsNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "followersNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "followingNumber" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "ReviewCreateDTO" : {
        "required" : [ "orderId", "reviewed", "title", "vote" ],
        "type" : "object",
        "properties" : {
          "orderId" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "vote" : {
            "maximum" : 5,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "reviewed" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          }
        }
      },
      "ClothingCreateDTO" : {
        "required" : [ "clothingSize", "colour", "condition", "deliveryCost", "productCategory", "productCost", "productGender", "productSize", "title", "visibility" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProductCreateDTO"
        }, {
          "type" : "object",
          "properties" : {
            "productGender" : {
              "type" : "string",
              "enum" : [ "MALE", "FEMALE", "UNISEX" ]
            },
            "clothingSize" : {
              "$ref" : "#/components/schemas/SizeDTO"
            },
            "colour" : {
              "type" : "string",
              "enum" : [ "YELLOW", "GREEN", "BLUE", "RED", "BLACK", "WHITE", "MULTICOLOUR" ]
            }
          }
        } ]
      },
      "EntertainmentCreateDTO" : {
        "required" : [ "condition", "deliveryCost", "entertainmentLanguage", "productCategory", "productCost", "productSize", "title", "visibility" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProductCreateDTO"
        }, {
          "type" : "object",
          "properties" : {
            "entertainmentLanguage" : {
              "type" : "string",
              "enum" : [ "MULTI_LANGUAGE", "ITALIAN", "FRENCH", "GERMAN", "ENGLISH", "SPANISH", "OTHERS" ]
            }
          }
        } ]
      },
      "HomeCreateDTO" : {
        "required" : [ "colour", "condition", "deliveryCost", "homeMaterial", "homeSize", "productCategory", "productCost", "productSize", "title", "visibility" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProductCreateDTO"
        }, {
          "type" : "object",
          "properties" : {
            "colour" : {
              "type" : "string",
              "enum" : [ "YELLOW", "GREEN", "BLUE", "RED", "BLACK", "WHITE", "MULTICOLOUR" ]
            },
            "homeSize" : {
              "$ref" : "#/components/schemas/SizeDTO"
            },
            "homeMaterial" : {
              "type" : "string",
              "enum" : [ "Cotton", "Linen", "Wool", "Acrylic", "Chiffon", "Polyamide_Nylon", "Polyester", "Silk", "Ceramic", "Glass", "Stainless_Steel", "Plastic", "Wood", "Stone", "Porcelain", "Silver", "Metal", "Other" ]
            }
          }
        } ]
      },
      "ProductCreateDTO" : {
        "required" : [ "condition", "deliveryCost", "productCategory", "productCost", "productSize", "title", "type", "visibility" ],
        "type" : "object",
        "properties" : {
          "title" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "productCost" : {
            "$ref" : "#/components/schemas/CustomMoneyDTO"
          },
          "deliveryCost" : {
            "$ref" : "#/components/schemas/CustomMoneyDTO"
          },
          "brand" : {
            "type" : "string"
          },
          "condition" : {
            "type" : "string",
            "enum" : [ "NEW_WITH_TAG", "NEW_WITHOUT_TAG", "VERY_GOOD", "GOOD", "ACCEPTABLE" ]
          },
          "productSize" : {
            "type" : "string",
            "enum" : [ "BIG", "MEDIUM", "SMALL" ]
          },
          "visibility" : {
            "type" : "string",
            "enum" : [ "PUBLIC", "PRIVATE" ]
          },
          "productCategory" : {
            "$ref" : "#/components/schemas/ProductCategoryDTO"
          },
          "type" : {
            "type" : "string"
          }
        },
        "discriminator" : {
          "propertyName" : "type"
        }
      },
      "CapabilityDTO" : {
        "type" : "object",
        "properties" : {
          "capabilityToken" : {
            "type" : "string"
          },
          "capabilityUrl" : {
            "type" : "string"
          }
        }
      },
      "PaymentMethodCreateDTO" : {
        "required" : [ "creditCard", "expiryDate", "isDefault", "owner" ],
        "type" : "object",
        "properties" : {
          "creditCard" : {
            "type" : "string"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date"
          },
          "isDefault" : {
            "type" : "boolean"
          },
          "owner" : {
            "type" : "string"
          }
        }
      },
      "OrderCreateDTO" : {
        "required" : [ "deliveryAddress", "product" ],
        "type" : "object",
        "properties" : {
          "product" : {
            "$ref" : "#/components/schemas/ProductBasicDTO"
          },
          "offer" : {
            "$ref" : "#/components/schemas/OfferBasicDTO"
          },
          "deliveryAddress" : {
            "$ref" : "#/components/schemas/AddressDTO"
          }
        }
      },
      "OfferCreateDTO" : {
        "required" : [ "amount", "product" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/CustomMoneyDTO"
          },
          "product" : {
            "$ref" : "#/components/schemas/ProductBasicDTO"
          }
        }
      },
      "OfferDTO" : {
        "required" : [ "amount", "id", "offerer", "product", "state" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "amount" : {
            "$ref" : "#/components/schemas/CustomMoneyDTO"
          },
          "creationTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "state" : {
            "type" : "string",
            "enum" : [ "PENDING", "ACCEPTED", "REJECTED", "CANCELLED" ]
          },
          "offerer" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          },
          "product" : {
            "$ref" : "#/components/schemas/ProductBasicDTO"
          }
        }
      },
      "NotificationDTO" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "receiver" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          },
          "userTarget" : {
            "type" : "string"
          },
          "productTarget" : {
            "type" : "string"
          },
          "offerTarget" : {
            "type" : "string"
          },
          "reviewTarget" : {
            "type" : "string"
          },
          "text" : {
            "type" : "string"
          },
          "read" : {
            "type" : "boolean"
          },
          "date" : {
            "type" : "string",
            "format" : "date-time"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "NEW_OFFER", "OFFER_REJECTED", "OFFER_ACCEPTED", "OFFER_CANCELED", "REVIEW", "MESSAGE", "SALE", "PURCHASE", "PRODUCT_SOLD", "NEW_PRODUCT", "FOLLOW", "USER", "NEW_FAVORITE" ]
          }
        }
      },
      "MessageCreateDTO" : {
        "required" : [ "receivedUser", "text" ],
        "type" : "object",
        "properties" : {
          "conversationId" : {
            "type" : "string"
          },
          "text" : {
            "type" : "string"
          },
          "product" : {
            "$ref" : "#/components/schemas/ProductBasicDTO"
          },
          "receivedUser" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          }
        }
      },
      "MessageDTO" : {
        "required" : [ "receivedUser", "sendUser", "text" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "conversationId" : {
            "type" : "string"
          },
          "text" : {
            "type" : "string"
          },
          "messageDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "messageStatus" : {
            "type" : "string",
            "enum" : [ "READ", "UNREAD" ]
          },
          "product" : {
            "$ref" : "#/components/schemas/ProductBasicDTO"
          },
          "sendUser" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          },
          "receivedUser" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          },
          "offer" : {
            "$ref" : "#/components/schemas/OfferBasicDTO"
          }
        }
      },
      "FollowingFollowersDTO" : {
        "required" : [ "follower", "following" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "followingFrom" : {
            "type" : "string",
            "format" : "date-time"
          },
          "follower" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          },
          "following" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          }
        }
      },
      "DeliveryCreateDTO" : {
        "required" : [ "order", "senderAddressId" ],
        "type" : "object",
        "properties" : {
          "order" : {
            "$ref" : "#/components/schemas/OrderBasicDTO"
          },
          "shipper" : {
            "type" : "string"
          },
          "senderAddressId" : {
            "type" : "string"
          }
        }
      },
      "AddressCreateDTO" : {
        "required" : [ "city", "country", "header", "isDefault", "phoneNumber", "street", "zipCode" ],
        "type" : "object",
        "properties" : {
          "header" : {
            "type" : "string"
          },
          "country" : {
            "type" : "string"
          },
          "city" : {
            "type" : "string"
          },
          "street" : {
            "type" : "string"
          },
          "zipCode" : {
            "type" : "string"
          },
          "phoneNumber" : {
            "type" : "string"
          },
          "isDefault" : {
            "type" : "boolean"
          }
        }
      },
      "PageUserBasicDTO" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserBasicDTO"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "PageableObject" : {
        "type" : "object",
        "properties" : {
          "offset" : {
            "type" : "integer",
            "format" : "int64"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageSize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "paged" : {
            "type" : "boolean"
          },
          "unpaged" : {
            "type" : "boolean"
          }
        }
      },
      "SortObject" : {
        "type" : "object",
        "properties" : {
          "empty" : {
            "type" : "boolean"
          },
          "sorted" : {
            "type" : "boolean"
          },
          "unsorted" : {
            "type" : "boolean"
          }
        }
      },
      "PageOrderBasicDTO" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrderBasicDTO"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "PageOfferBasicDTO" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OfferBasicDTO"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "PageProductBasicDTO" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductBasicDTO"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "PageReviewDTO" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReviewDTO"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "PageReportDTO" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReportDTO"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "PageMessageDTO" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MessageDTO"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "Address" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "header" : {
            "type" : "string"
          },
          "country" : {
            "type" : "string"
          },
          "city" : {
            "type" : "string"
          },
          "street" : {
            "type" : "string"
          },
          "zipCode" : {
            "type" : "string"
          },
          "phoneNumber" : {
            "type" : "string"
          },
          "orders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Order"
            }
          },
          "user" : {
            "$ref" : "#/components/schemas/User"
          },
          "sentDeliveries" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Delivery"
            }
          },
          "receivedDeliveries" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Delivery"
            }
          },
          "default" : {
            "type" : "boolean"
          }
        }
      },
      "CurrencyUnit" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "numericCode" : {
            "type" : "integer",
            "format" : "int32"
          },
          "decimalPlaces" : {
            "type" : "integer",
            "format" : "int32"
          },
          "symbol" : {
            "type" : "string"
          },
          "numeric3Code" : {
            "type" : "string"
          },
          "countryCodes" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "pseudoCurrency" : {
            "type" : "boolean"
          }
        }
      },
      "CustomMoney" : {
        "type" : "object",
        "properties" : {
          "price" : {
            "type" : "number",
            "format" : "double"
          },
          "currency" : {
            "type" : "string",
            "enum" : [ "EUR", "USD" ]
          },
          "money" : {
            "$ref" : "#/components/schemas/Money"
          }
        }
      },
      "Delivery" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "order" : {
            "$ref" : "#/components/schemas/Order"
          },
          "sendTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "deliveredTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "deliveryCost" : {
            "$ref" : "#/components/schemas/CustomMoney"
          },
          "shipper" : {
            "type" : "string"
          },
          "deliveryStatus" : {
            "type" : "string",
            "enum" : [ "SHIPPED", "DELIVERED" ]
          },
          "senderAddress" : {
            "$ref" : "#/components/schemas/Address"
          },
          "receiverAddress" : {
            "$ref" : "#/components/schemas/Address"
          }
        }
      },
      "Following" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "followingFrom" : {
            "type" : "string",
            "format" : "date-time"
          },
          "follower" : {
            "$ref" : "#/components/schemas/User"
          },
          "following" : {
            "$ref" : "#/components/schemas/User"
          }
        }
      },
      "GrantedAuthority" : {
        "type" : "object",
        "properties" : {
          "authority" : {
            "type" : "string"
          }
        }
      },
      "Message" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "text" : {
            "type" : "string"
          },
          "conversationId" : {
            "type" : "string"
          },
          "messageDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "messageStatus" : {
            "type" : "string",
            "enum" : [ "READ", "UNREAD" ]
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          },
          "sendUser" : {
            "$ref" : "#/components/schemas/User"
          },
          "receivedUser" : {
            "$ref" : "#/components/schemas/User"
          },
          "offer" : {
            "$ref" : "#/components/schemas/Offer"
          }
        }
      },
      "Money" : {
        "type" : "object",
        "properties" : {
          "zero" : {
            "type" : "boolean"
          },
          "negative" : {
            "type" : "boolean"
          },
          "positive" : {
            "type" : "boolean"
          },
          "amount" : {
            "type" : "number"
          },
          "scale" : {
            "type" : "integer",
            "format" : "int32"
          },
          "currencyUnit" : {
            "$ref" : "#/components/schemas/CurrencyUnit"
          },
          "amountMajor" : {
            "type" : "number"
          },
          "amountMajorLong" : {
            "type" : "integer",
            "format" : "int64"
          },
          "amountMajorInt" : {
            "type" : "integer",
            "format" : "int32"
          },
          "amountMinor" : {
            "type" : "number"
          },
          "amountMinorLong" : {
            "type" : "integer",
            "format" : "int64"
          },
          "amountMinorInt" : {
            "type" : "integer",
            "format" : "int32"
          },
          "minorPart" : {
            "type" : "integer",
            "format" : "int32"
          },
          "positiveOrZero" : {
            "type" : "boolean"
          },
          "negativeOrZero" : {
            "type" : "boolean"
          }
        }
      },
      "Notification" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "receiver" : {
            "$ref" : "#/components/schemas/User"
          },
          "userTarget" : {
            "type" : "string"
          },
          "productTarget" : {
            "type" : "string"
          },
          "offerTarget" : {
            "type" : "string"
          },
          "reviewTarget" : {
            "type" : "string"
          },
          "text" : {
            "type" : "string"
          },
          "read" : {
            "type" : "boolean"
          },
          "date" : {
            "type" : "string",
            "format" : "date-time"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "NEW_OFFER", "OFFER_REJECTED", "OFFER_ACCEPTED", "OFFER_CANCELED", "REVIEW", "MESSAGE", "SALE", "PURCHASE", "PRODUCT_SOLD", "NEW_PRODUCT", "FOLLOW", "USER", "NEW_FAVORITE" ]
          }
        }
      },
      "Offer" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "amount" : {
            "$ref" : "#/components/schemas/CustomMoney"
          },
          "creationTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "state" : {
            "type" : "string",
            "enum" : [ "PENDING", "ACCEPTED", "REJECTED", "CANCELLED" ]
          },
          "offerer" : {
            "$ref" : "#/components/schemas/User"
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          },
          "message" : {
            "$ref" : "#/components/schemas/Message"
          },
          "order" : {
            "$ref" : "#/components/schemas/Order"
          }
        }
      },
      "Order" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "orderDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "orderUpdateDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "state" : {
            "type" : "string",
            "enum" : [ "CANCELED", "PENDING", "PURCHASED", "SHIPPED", "DELIVERED", "COMPLETED", "REVIEWED" ]
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          },
          "user" : {
            "$ref" : "#/components/schemas/User"
          },
          "delivery" : {
            "$ref" : "#/components/schemas/Delivery"
          },
          "deliveryAddress" : {
            "$ref" : "#/components/schemas/Address"
          },
          "offer" : {
            "$ref" : "#/components/schemas/Offer"
          },
          "transaction" : {
            "$ref" : "#/components/schemas/Transaction"
          }
        }
      },
      "PaymentMethod" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "creditCard" : {
            "type" : "string"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date"
          },
          "owner" : {
            "type" : "string"
          },
          "ownerUser" : {
            "$ref" : "#/components/schemas/User"
          },
          "default" : {
            "type" : "boolean"
          }
        }
      },
      "Product" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "productCost" : {
            "$ref" : "#/components/schemas/CustomMoney"
          },
          "deliveryCost" : {
            "$ref" : "#/components/schemas/CustomMoney"
          },
          "brand" : {
            "type" : "string"
          },
          "condition" : {
            "type" : "string",
            "enum" : [ "NEW_WITH_TAG", "NEW_WITHOUT_TAG", "VERY_GOOD", "GOOD", "ACCEPTABLE" ]
          },
          "productSize" : {
            "type" : "string",
            "enum" : [ "BIG", "MEDIUM", "SMALL" ]
          },
          "views" : {
            "type" : "integer",
            "format" : "int32"
          },
          "uploadDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastUpdateDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "visibility" : {
            "type" : "string",
            "enum" : [ "PUBLIC", "PRIVATE" ]
          },
          "availability" : {
            "type" : "string",
            "enum" : [ "AVAILABLE", "PENDING", "UNAVAILABLE" ]
          },
          "productCategory" : {
            "$ref" : "#/components/schemas/ProductCategory"
          },
          "likesNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "seller" : {
            "$ref" : "#/components/schemas/User"
          },
          "usersThatLiked" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/User"
            }
          },
          "offers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Offer"
            }
          },
          "messages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Message"
            }
          },
          "order" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Order"
            }
          },
          "productImages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductImage"
            }
          },
          "reports" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Report"
            }
          }
        }
      },
      "ProductCategory" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "primaryCat" : {
            "type" : "string"
          },
          "secondaryCat" : {
            "type" : "string"
          },
          "tertiaryCat" : {
            "type" : "string"
          },
          "visibility" : {
            "type" : "string",
            "enum" : [ "PUBLIC", "PRIVATE" ]
          },
          "products" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Product"
            }
          }
        }
      },
      "ProductImage" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "urlPhoto" : {
            "type" : "string"
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          }
        }
      },
      "Report" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "reporterUser" : {
            "$ref" : "#/components/schemas/User"
          },
          "description" : {
            "type" : "string"
          },
          "reportedUser" : {
            "$ref" : "#/components/schemas/User"
          },
          "reportedProduct" : {
            "$ref" : "#/components/schemas/Product"
          },
          "date" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "PENDING", "CLOSED" ]
          },
          "adminFollowedReport" : {
            "$ref" : "#/components/schemas/User"
          }
        }
      },
      "Review" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "date" : {
            "type" : "string",
            "format" : "date-time"
          },
          "title" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "vote" : {
            "type" : "integer",
            "format" : "int32"
          },
          "reviewer" : {
            "$ref" : "#/components/schemas/User"
          },
          "reviewed" : {
            "$ref" : "#/components/schemas/User"
          }
        }
      },
      "Transaction" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "creationTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amount" : {
            "$ref" : "#/components/schemas/CustomMoney"
          },
          "transactionState" : {
            "type" : "string",
            "enum" : [ "REJECTED", "COMPLETED" ]
          },
          "paymentMethod" : {
            "type" : "string"
          },
          "paymentMethodOwner" : {
            "type" : "string"
          },
          "order" : {
            "$ref" : "#/components/schemas/Order"
          }
        }
      },
      "User" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "username" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "bio" : {
            "type" : "string"
          },
          "photoProfile" : {
            "$ref" : "#/components/schemas/UserImage"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "LOCAL", "KEYCLOAK", "GOOGLE" ]
          },
          "addresses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Address"
            }
          },
          "role" : {
            "type" : "string",
            "enum" : [ "ADMIN", "USER", "SUPER_ADMIN" ]
          },
          "emailVerified" : {
            "type" : "boolean"
          },
          "paymentMethods" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentMethod"
            }
          },
          "offersMade" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Offer"
            }
          },
          "sellingProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Product"
            }
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Following"
            }
          },
          "following" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Following"
            }
          },
          "followersNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "followingNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "reviewsTotalSum" : {
            "type" : "integer",
            "format" : "int32"
          },
          "reviewsNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "likedProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Product"
            }
          },
          "sentMessages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Message"
            }
          },
          "receivedMessages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Message"
            }
          },
          "orders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Order"
            }
          },
          "receivedReviews" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Review"
            }
          },
          "sentReviews" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Review"
            }
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "BANNED", "HIDDEN", "HOLIDAY", "CANCELLED" ]
          },
          "reports" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Report"
            }
          },
          "reported" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Report"
            }
          },
          "adminFollowedMyReport" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Report"
            }
          },
          "notifications" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Notification"
            }
          },
          "enabled" : {
            "type" : "boolean"
          },
          "administrator" : {
            "type" : "boolean"
          },
          "authorities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GrantedAuthority"
            }
          },
          "accountNonExpired" : {
            "type" : "boolean"
          },
          "accountNonLocked" : {
            "type" : "boolean"
          },
          "credentialsNonExpired" : {
            "type" : "boolean"
          }
        }
      },
      "UserImage" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "urlPhoto" : {
            "type" : "string"
          },
          "user" : {
            "$ref" : "#/components/schemas/User"
          }
        }
      },
      "PagePaymentMethodBasicDTO" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentMethodBasicDTO"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "PageNotificationDTO" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/NotificationDTO"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "ConversationDTO" : {
        "required" : [ "lastMessage", "otherUser", "unreadMessages" ],
        "type" : "object",
        "properties" : {
          "productBasicDTO" : {
            "$ref" : "#/components/schemas/ProductBasicDTO"
          },
          "otherUser" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          },
          "lastMessage" : {
            "$ref" : "#/components/schemas/MessageDTO"
          },
          "unreadMessages" : {
            "type" : "boolean"
          },
          "conversationId" : {
            "type" : "string"
          }
        }
      },
      "PageFollowingFollowersDTO" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FollowingFollowersDTO"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "PageUserDTO" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserDTO"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      }
    },
    "securitySchemes" : {
      "App_Bearer_token" : {
        "type" : "http",
        "in" : "header",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      }
    }
  }
}}; TIME TAKEN={1663} 
23:49:42.751 [34mINFO [0;39m [35mmyLogger[0;39m - 
FINISHED PROCESSING : METHOD={GET}; REQUESTURI={/v3/api-docs}; REMOTEADDR={127.0.0.1};
REQUEST PAYLOAD={};
LOGGED USERNAME={}; RESPONSE CODE={200};
RESPONSE={{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "OpenAPI definition",
    "version" : "v0"
  },
  "servers" : [ {
    "url" : "http://localhost:8080",
    "description" : "Generated server url"
  } ],
  "paths" : {
    "/api/v1/superAdmin/size/{sizeId}" : {
      "put" : {
        "tags" : [ "super-admin-controller" ],
        "operationId" : "replaceSize",
        "parameters" : [ {
          "name" : "sizeId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SizeDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SizeDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "super-admin-controller" ],
        "operationId" : "deleteSize",
        "parameters" : [ {
          "name" : "sizeId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/superAdmin/categories/{catId}" : {
      "put" : {
        "tags" : [ "super-admin-controller" ],
        "operationId" : "replaceProductCategory",
        "parameters" : [ {
          "name" : "catId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductCategoryDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductCategoryDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "super-admin-controller" ],
        "operationId" : "productCategoryEnableOrDisable",
        "parameters" : [ {
          "name" : "catId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "super-admin-controller" ],
        "operationId" : "deleteCategory",
        "parameters" : [ {
          "name" : "catId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/reviews/{id}" : {
      "get" : {
        "tags" : [ "review-controller" ],
        "operationId" : "reviewById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReviewDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "review-controller" ],
        "operationId" : "updateReview",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReviewDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReviewDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "review-controller" ],
        "operationId" : "deleteReview",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/reports/{id}" : {
      "put" : {
        "tags" : [ "report-controller" ],
        "operationId" : "updateReport",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/{id}" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "productById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/ProductDTO"
                  }, {
                    "$ref" : "#/components/schemas/ClothingDTO"
                  }, {
                    "$ref" : "#/components/schemas/EntertainmentDTO"
                  }, {
                    "$ref" : "#/components/schemas/HomeDTO"
                  } ]
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "product-controller" ],
        "operationId" : "updateProduct",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "$ref" : "#/components/schemas/ProductDTO"
                }, {
                  "$ref" : "#/components/schemas/ClothingDTO"
                }, {
                  "$ref" : "#/components/schemas/EntertainmentDTO"
                }, {
                  "$ref" : "#/components/schemas/HomeDTO"
                } ]
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/ProductDTO"
                  }, {
                    "$ref" : "#/components/schemas/ClothingDTO"
                  }, {
                    "$ref" : "#/components/schemas/EntertainmentDTO"
                  }, {
                    "$ref" : "#/components/schemas/HomeDTO"
                  } ]
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "product-controller" ],
        "operationId" : "deleteProduct",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/payment-methods/{id}" : {
      "get" : {
        "tags" : [ "payment-method-controller" ],
        "operationId" : "getPaymentMethod",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentMethodDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "payment-method-controller" ],
        "operationId" : "updatePaymentMethod",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentMethodDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentMethodDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "payment-method-controller" ],
        "operationId" : "deletePaymentMethod",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/orders/{id}" : {
      "get" : {
        "tags" : [ "order-controller" ],
        "operationId" : "getOrder",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "order-controller" ],
        "operationId" : "updateOrder",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrderDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "order-controller" ],
        "operationId" : "deleteOrder",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/images/users/photo-profile/{id}" : {
      "put" : {
        "tags" : [ "image-controller" ],
        "operationId" : "replacePhotoUser",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "multipartFile" : {
                    "type" : "string",
                    "format" : "binary"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "image-controller" ],
        "operationId" : "deletePhotoUser",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/images/product/{id}" : {
      "put" : {
        "tags" : [ "image-controller" ],
        "operationId" : "replaceImageProduct",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "multipartFile" : {
                    "type" : "string",
                    "format" : "binary"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "image-controller" ],
        "operationId" : "deleteImageProduct",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/deliveries/{id}" : {
      "get" : {
        "tags" : [ "delivery-controller" ],
        "operationId" : "getDelivery",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeliveryDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "delivery-controller" ],
        "operationId" : "updateDelivery",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeliveryDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeliveryDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/deliveries/address/{id}" : {
      "get" : {
        "tags" : [ "delivery-controller" ],
        "operationId" : "getAddress",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddressDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "delivery-controller" ],
        "operationId" : "updateAddress",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddressDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddressDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "delivery-controller" ],
        "operationId" : "deleteAddress",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/admin/products/" : {
      "put" : {
        "tags" : [ "admin-controller" ],
        "operationId" : "updateProduct_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "$ref" : "#/components/schemas/ProductDTO"
                }, {
                  "$ref" : "#/components/schemas/ClothingDTO"
                }, {
                  "$ref" : "#/components/schemas/EntertainmentDTO"
                }, {
                  "$ref" : "#/components/schemas/HomeDTO"
                } ]
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/ProductDTO"
                  }, {
                    "$ref" : "#/components/schemas/ClothingDTO"
                  }, {
                    "$ref" : "#/components/schemas/EntertainmentDTO"
                  }, {
                    "$ref" : "#/components/schemas/HomeDTO"
                  } ]
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/userHoliday" : {
      "post" : {
        "tags" : [ "user-controller" ],
        "operationId" : "userHoliday",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/unlike/{id}" : {
      "post" : {
        "tags" : [ "user-controller" ],
        "operationId" : "unlike",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/register" : {
      "post" : {
        "tags" : [ "user-controller" ],
        "operationId" : "register",
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "email",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "password",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/logout" : {
      "post" : {
        "tags" : [ "user-controller" ],
        "operationId" : "logout",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/login-with-keycloak" : {
      "post" : {
        "tags" : [ "user-controller" ],
        "operationId" : "loginWithKeycloak",
        "parameters" : [ {
          "name" : "body",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/login-with-google" : {
      "post" : {
        "tags" : [ "user-controller" ],
        "operationId" : "loginWithGoogle",
        "parameters" : [ {
          "name" : "body",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/LoginWithGoogleBody"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/like/{id}" : {
      "post" : {
        "tags" : [ "user-controller" ],
        "operationId" : "like",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/keycloak-auth" : {
      "post" : {
        "tags" : [ "user-controller" ],
        "operationId" : "keycloakAuth",
        "parameters" : [ {
          "name" : "idTokenString",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/google-auth" : {
      "post" : {
        "tags" : [ "user-controller" ],
        "operationId" : "googleAuth",
        "parameters" : [ {
          "name" : "idTokenString",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/changePassword" : {
      "post" : {
        "tags" : [ "user-controller" ],
        "operationId" : "changePassword",
        "parameters" : [ {
          "name" : "oldPassword",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "newPassword",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/authenticate" : {
      "post" : {
        "tags" : [ "user-controller" ],
        "operationId" : "authenticate",
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "password",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/transactions" : {
      "get" : {
        "tags" : [ "transaction-controller" ],
        "operationId" : "allTransaction",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "transaction-controller" ],
        "operationId" : "createTransaction",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TransactionCreateDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TransactionDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/superAdmin/users/changeRole" : {
      "post" : {
        "tags" : [ "super-admin-controller" ],
        "operationId" : "changeRole",
        "parameters" : [ {
          "name" : "userId",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "role",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "ADMIN", "USER", "SUPER_ADMIN" ]
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/superAdmin/size" : {
      "post" : {
        "tags" : [ "super-admin-controller" ],
        "operationId" : "createNewSize",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SizeDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SizeDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/superAdmin/categories" : {
      "post" : {
        "tags" : [ "super-admin-controller" ],
        "operationId" : "createNewCategory",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductCategoryDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductCategoryDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/reviews" : {
      "post" : {
        "tags" : [ "review-controller" ],
        "operationId" : "createReview",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReviewCreateDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReviewDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/reports" : {
      "get" : {
        "tags" : [ "report-controller" ],
        "operationId" : "getReportsByStatus",
        "parameters" : [ {
          "name" : "status",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "PENDING", "CLOSED" ]
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageReportDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "report-controller" ],
        "operationId" : "createReport",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReportDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/reports/close/{id}" : {
      "post" : {
        "tags" : [ "report-controller" ],
        "operationId" : "closeReport",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products" : {
      "post" : {
        "tags" : [ "product-controller" ],
        "operationId" : "createProduct",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "oneOf" : [ {
                  "$ref" : "#/components/schemas/ProductCreateDTO"
                }, {
                  "$ref" : "#/components/schemas/ClothingCreateDTO"
                }, {
                  "$ref" : "#/components/schemas/EntertainmentCreateDTO"
                }, {
                  "$ref" : "#/components/schemas/HomeCreateDTO"
                } ]
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/ProductDTO"
                  }, {
                    "$ref" : "#/components/schemas/ClothingDTO"
                  }, {
                    "$ref" : "#/components/schemas/EntertainmentDTO"
                  }, {
                    "$ref" : "#/components/schemas/HomeDTO"
                  } ]
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/capability/{productId}" : {
      "post" : {
        "tags" : [ "product-controller" ],
        "operationId" : "createCapability",
        "parameters" : [ {
          "name" : "productId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CapabilityDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/payment-methods" : {
      "get" : {
        "tags" : [ "payment-method-controller" ],
        "operationId" : "getMyPaymentMethods",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagePaymentMethodBasicDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "payment-method-controller" ],
        "operationId" : "createPaymentMethod",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentMethodCreateDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentMethodDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/orders" : {
      "post" : {
        "tags" : [ "order-controller" ],
        "operationId" : "createOrder",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrderCreateDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/offers" : {
      "post" : {
        "tags" : [ "offer-controller" ],
        "operationId" : "createOffer",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OfferCreateDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OfferDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/notifications/" : {
      "get" : {
        "tags" : [ "notification-controller" ],
        "operationId" : "getAllUserNotifications",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "sizePage",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageNotificationDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "notification-controller" ],
        "operationId" : "readNotification",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NotificationDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/messages" : {
      "post" : {
        "tags" : [ "message-controller" ],
        "operationId" : "createMessage",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MessageCreateDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessageDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/messages/read" : {
      "post" : {
        "tags" : [ "message-controller" ],
        "operationId" : "setReadMessages",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/images/users/photo-profile" : {
      "post" : {
        "tags" : [ "image-controller" ],
        "operationId" : "savePhotoUser",
        "parameters" : [ {
          "name" : "description",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "multipartFile" : {
                    "type" : "string",
                    "format" : "binary"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserImageDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/images/product" : {
      "post" : {
        "tags" : [ "image-controller" ],
        "operationId" : "saveImageProduct",
        "parameters" : [ {
          "name" : "product_id",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "description",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "multipartFile" : {
                    "type" : "string",
                    "format" : "binary"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductImageDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/follow/{userId}" : {
      "post" : {
        "tags" : [ "following-controller" ],
        "operationId" : "follow",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FollowingFollowersDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "following-controller" ],
        "operationId" : "unfollow",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/deliveries" : {
      "post" : {
        "tags" : [ "delivery-controller" ],
        "operationId" : "createDelivery",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeliveryCreateDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeliveryDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/deliveries/address" : {
      "get" : {
        "tags" : [ "delivery-controller" ],
        "operationId" : "getMyAddressList",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "delivery-controller" ],
        "operationId" : "createAddress",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddressCreateDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddressDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/admin/users/unban/{userId}" : {
      "post" : {
        "tags" : [ "admin-controller" ],
        "operationId" : "unbanUser",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/admin/users/ban/{userId}" : {
      "post" : {
        "tags" : [ "admin-controller" ],
        "operationId" : "banUser",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/{id}" : {
      "get" : {
        "tags" : [ "user-controller" ],
        "operationId" : "userById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserBasicDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "user-controller" ],
        "operationId" : "deleteUser",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "patch" : {
        "tags" : [ "user-controller" ],
        "operationId" : "updateUser",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserDTO"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/offers/{id}/state" : {
      "patch" : {
        "tags" : [ "offer-controller" ],
        "operationId" : "setOfferState",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string",
                "enum" : [ "PENDING", "ACCEPTED", "REJECTED", "CANCELLED" ]
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OfferDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/offers/{id}/reject" : {
      "patch" : {
        "tags" : [ "offer-controller" ],
        "operationId" : "rejectOffer",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OfferDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/offers/{id}/cancel" : {
      "patch" : {
        "tags" : [ "offer-controller" ],
        "operationId" : "cancelOffer",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OfferDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/offers/{id}/accept" : {
      "patch" : {
        "tags" : [ "offer-controller" ],
        "operationId" : "acceptOffer",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OfferDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/search-by-username" : {
      "get" : {
        "tags" : [ "user-controller" ],
        "operationId" : "searchByUsername",
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageUserBasicDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/resetPassword" : {
      "get" : {
        "tags" : [ "user-controller" ],
        "operationId" : "resetPassword",
        "parameters" : [ {
          "name" : "email",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/refreshToken" : {
      "get" : {
        "tags" : [ "user-controller" ],
        "operationId" : "refreshToken",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/me" : {
      "get" : {
        "tags" : [ "user-controller" ],
        "operationId" : "me",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/me/orders" : {
      "get" : {
        "tags" : [ "user-controller" ],
        "operationId" : "getMyOrders",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageOrderBasicDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/me/offers" : {
      "get" : {
        "tags" : [ "user-controller" ],
        "operationId" : "getMyOffers",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageOfferBasicDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/liked/" : {
      "get" : {
        "tags" : [ "user-controller" ],
        "operationId" : "getLikedProducts",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageProductBasicDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/getNewPassword" : {
      "get" : {
        "tags" : [ "user-controller" ],
        "operationId" : "resetPasswordToken",
        "parameters" : [ {
          "name" : "token",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/find-by-username" : {
      "get" : {
        "tags" : [ "user-controller" ],
        "operationId" : "findByUsername",
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserBasicDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/default-address" : {
      "get" : {
        "tags" : [ "user-controller" ],
        "operationId" : "getDefaultAddress",
        "parameters" : [ {
          "name" : "userId",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddressDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/users/activate" : {
      "get" : {
        "tags" : [ "user-controller" ],
        "operationId" : "activate",
        "parameters" : [ {
          "name" : "token",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/transactions/{id}" : {
      "get" : {
        "tags" : [ "transaction-controller" ],
        "operationId" : "transactionById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TransactionDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/reviews/{userId}/sent" : {
      "get" : {
        "tags" : [ "review-controller" ],
        "operationId" : "allReviewSent",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "sizePage",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageReviewDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/reviews/{userId}/received" : {
      "get" : {
        "tags" : [ "review-controller" ],
        "operationId" : "allReviewReceived",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "sizePage",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageReviewDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/reports/working" : {
      "get" : {
        "tags" : [ "report-controller" ],
        "operationId" : "getReportsMeManaging",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageReportDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/{id}/offers" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getProductOffers",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageOfferBasicDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/{id}/messages" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getProductMessages",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageMessageDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/tertiaryCategories/{secondary}" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getTertiaryCategoriesList",
        "parameters" : [ {
          "name" : "secondary",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/sizes" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getSizesList",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/sizes/{category}" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getSizesListByCategory",
        "parameters" : [ {
          "name" : "category",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/secondaryCategories/{primary}" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getSecondaryCategoriesList",
        "parameters" : [ {
          "name" : "primary",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/primaryCategories" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getPrimaryCategoriesList",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/me" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getMyProducts",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageProductBasicDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/likes/users/{productId}" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getUsersThatLikedProduct",
        "parameters" : [ {
          "name" : "productId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/filter" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getFilteredProducts",
        "parameters" : [ {
          "name" : "title",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "description",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "minProductCost",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "number",
            "format" : "double"
          }
        }, {
          "name" : "maxProductCost",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "number",
            "format" : "double"
          }
        }, {
          "name" : "brands",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "condition",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "NEW_WITH_TAG", "NEW_WITHOUT_TAG", "VERY_GOOD", "GOOD", "ACCEPTABLE" ]
            }
          }
        }, {
          "name" : "views",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "userId",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "uploadDate",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "availability",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "AVAILABLE", "PENDING", "UNAVAILABLE" ]
          }
        }, {
          "name" : "productCategory",
          "in" : "query",
          "required" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ProductCategory"
          }
        }, {
          "name" : "primaryCat",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "secondaryCat",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tertiaryCat",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "likesNumber",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "productGender",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "MALE", "FEMALE", "UNISEX" ]
          }
        }, {
          "name" : "sizes",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "colour",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "YELLOW", "GREEN", "BLUE", "RED", "BLACK", "WHITE", "MULTICOLOUR" ]
          }
        }, {
          "name" : "entertainmentLanguage",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "MULTI_LANGUAGE", "ITALIAN", "FRENCH", "GERMAN", "ENGLISH", "SPANISH", "OTHERS" ]
          }
        }, {
          "name" : "homeMaterial",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "Cotton", "Linen", "Wool", "Acrylic", "Chiffon", "Polyamide_Nylon", "Polyester", "Silk", "Ceramic", "Glass", "Stainless_Steel", "Plastic", "Wood", "Stone", "Porcelain", "Silver", "Metal", "Other" ]
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "sizePage",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "uploadDate"
          }
        }, {
          "name" : "sortDirection",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "DESC"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageProductBasicDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/category/{category}" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getCategoryId",
        "parameters" : [ {
          "name" : "category",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/categories" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getCategoriesList",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/categories/clothing/gender" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getProductGender",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/capability/{token}" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "getProductFromCapability",
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/ProductDTO"
                  }, {
                    "$ref" : "#/components/schemas/ClothingDTO"
                  }, {
                    "$ref" : "#/components/schemas/EntertainmentDTO"
                  }, {
                    "$ref" : "#/components/schemas/HomeDTO"
                  } ]
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/products/basic/{id}" : {
      "get" : {
        "tags" : [ "product-controller" ],
        "operationId" : "productBasicById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductBasicDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/orders/me" : {
      "get" : {
        "tags" : [ "order-controller" ],
        "operationId" : "getAllOrdersOfUser",
        "parameters" : [ {
          "name" : "state",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "CANCELED", "PENDING", "PURCHASED", "SHIPPED", "DELIVERED", "COMPLETED", "REVIEWED" ]
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "sizePage",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageOrderBasicDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/orders/me/seller" : {
      "get" : {
        "tags" : [ "order-controller" ],
        "operationId" : "getAllOrdersOfSeller",
        "parameters" : [ {
          "name" : "state",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "CANCELED", "PENDING", "PURCHASED", "SHIPPED", "DELIVERED", "COMPLETED", "REVIEWED" ]
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "sizePage",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageOrderBasicDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/offers/{id}" : {
      "get" : {
        "tags" : [ "offer-controller" ],
        "operationId" : "getOffer",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OfferDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/messages/{id}" : {
      "get" : {
        "tags" : [ "message-controller" ],
        "operationId" : "getMessage",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessageDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "message-controller" ],
        "operationId" : "deleteMessage",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/messages/conversations" : {
      "get" : {
        "tags" : [ "message-controller" ],
        "operationId" : "getAllMyConversations",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "default" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ConversationDTO"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/messages/conversations/{conversationId}" : {
      "get" : {
        "tags" : [ "message-controller" ],
        "operationId" : "getConversationById",
        "parameters" : [ {
          "name" : "conversationId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/messages/conversations/{conversationId}/messages" : {
      "get" : {
        "tags" : [ "message-controller" ],
        "operationId" : "getConversationMessages",
        "parameters" : [ {
          "name" : "conversationId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "sizePage",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageMessageDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/messages/conversations/with/{userId}" : {
      "get" : {
        "tags" : [ "message-controller" ],
        "operationId" : "getConversationWithUser",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productId",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/me/following/{userId}" : {
      "get" : {
        "tags" : [ "following-controller" ],
        "operationId" : "imFollowingThisUser",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/ip" : {
      "get" : {
        "tags" : [ "demo-controller" ],
        "operationId" : "getIp",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/images/{type}/{folder_name}/{file_name}" : {
      "get" : {
        "tags" : [ "image-controller" ],
        "operationId" : "getImage",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "folder_name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "file_name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "image/png" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/following/{userId}" : {
      "get" : {
        "tags" : [ "following-controller" ],
        "operationId" : "getFollowingByUser",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "sizePage",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageFollowingFollowersDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/followers/{userId}" : {
      "get" : {
        "tags" : [ "following-controller" ],
        "operationId" : "getFollowersOfUser",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        }, {
          "name" : "sizePage",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageFollowingFollowersDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/admin/users" : {
      "get" : {
        "tags" : [ "admin-controller" ],
        "operationId" : "getUsers",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "userRole",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "ADMIN", "USER", "SUPER_ADMIN" ]
          }
        }, {
          "name" : "username",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageUserDTO"
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/admin/products/{productId}" : {
      "get" : {
        "tags" : [ "admin-controller" ],
        "operationId" : "getProduct",
        "parameters" : [ {
          "name" : "productId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/ProductDTO"
                  }, {
                    "$ref" : "#/components/schemas/ClothingDTO"
                  }, {
                    "$ref" : "#/components/schemas/EntertainmentDTO"
                  }, {
                    "$ref" : "#/components/schemas/HomeDTO"
                  } ]
                }
              }
            }
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "admin-controller" ],
        "operationId" : "deleteProduct_1",
        "parameters" : [ {
          "name" : "productId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        },
        "security" : [ {
          "App_Bearer_token" : [ ]
        } ]
      }
    },
    "/api/v1/demo" : {
      "get" : {
        "tags" : [ "demo-controller" ],
        "operationId" : "createDemoData",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        }
      },
      "put" : {
        "tags" : [ "demo-controller" ],
        "operationId" : "createDemoData_3",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        }
      },
      "post" : {
        "tags" : [ "demo-controller" ],
        "operationId" : "createDemoData_2",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "tags" : [ "demo-controller" ],
        "operationId" : "createDemoData_5",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        }
      },
      "options" : {
        "tags" : [ "demo-controller" ],
        "operationId" : "createDemoData_6",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        }
      },
      "head" : {
        "tags" : [ "demo-controller" ],
        "operationId" : "createDemoData_1",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        }
      },
      "patch" : {
        "tags" : [ "demo-controller" ],
        "operationId" : "createDemoData_4",
        "responses" : {
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : { }
          },
          "404" : {
            "description" : "Not Found",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : { }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "511" : {
            "description" : "Network Authentication Required",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "200" : {
            "description" : "OK"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "SizeDTO" : {
        "required" : [ "sizeName", "type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "sizeName" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "ProductCategoryDTO" : {
        "required" : [ "primaryCat", "secondaryCat", "tertiaryCat" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "primaryCat" : {
            "type" : "string"
          },
          "secondaryCat" : {
            "type" : "string"
          },
          "tertiaryCat" : {
            "type" : "string"
          }
        }
      },
      "ReviewDTO" : {
        "required" : [ "id", "reviewed", "reviewer", "title", "vote" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "date" : {
            "type" : "string",
            "format" : "date-time"
          },
          "title" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "vote" : {
            "maximum" : 5,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "reviewer" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          },
          "reviewed" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          }
        }
      },
      "UserBasicDTO" : {
        "required" : [ "id", "username" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "username" : {
            "type" : "string"
          },
          "bio" : {
            "type" : "string"
          },
          "photoProfile" : {
            "$ref" : "#/components/schemas/UserImageDTO"
          },
          "reviewsTotalSum" : {
            "type" : "integer",
            "format" : "int32"
          },
          "reviewsNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "followersNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "followingNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "BANNED", "HIDDEN", "HOLIDAY", "CANCELLED" ]
          }
        }
      },
      "UserImageDTO" : {
        "required" : [ "urlPhoto" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "urlPhoto" : {
            "type" : "string"
          }
        }
      },
      "CustomMoneyDTO" : {
        "required" : [ "currency", "price" ],
        "type" : "object",
        "properties" : {
          "price" : {
            "type" : "number",
            "format" : "double"
          },
          "currency" : {
            "type" : "string",
            "enum" : [ "EUR", "USD" ]
          }
        }
      },
      "ProductBasicDTO" : {
        "required" : [ "deliveryCost", "id", "productCost" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "uploadDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "productCost" : {
            "$ref" : "#/components/schemas/CustomMoneyDTO"
          },
          "deliveryCost" : {
            "$ref" : "#/components/schemas/CustomMoneyDTO"
          },
          "brand" : {
            "type" : "string"
          },
          "condition" : {
            "type" : "string",
            "enum" : [ "NEW_WITH_TAG", "NEW_WITHOUT_TAG", "VERY_GOOD", "GOOD", "ACCEPTABLE" ]
          },
          "likesNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "seller" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          },
          "productImages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductImageDTO"
            }
          },
          "productCategory" : {
            "$ref" : "#/components/schemas/ProductCategoryDTO"
          }
        }
      },
      "ProductImageDTO" : {
        "required" : [ "urlPhoto" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "urlPhoto" : {
            "type" : "string"
          }
        }
      },
      "ReportDTO" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "reporterUser" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          },
          "description" : {
            "type" : "string"
          },
          "reportedUser" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          },
          "reportedProduct" : {
            "$ref" : "#/components/schemas/ProductBasicDTO"
          },
          "date" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "PENDING", "CLOSED" ]
          },
          "adminFollowedReport" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          }
        }
      },
      "ClothingDTO" : {
        "required" : [ "availability", "clothingSize", "colour", "condition", "deliveryCost", "id", "productCategory", "productCost", "productGender", "productSize", "seller", "title", "visibility" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProductDTO"
        }, {
          "type" : "object",
          "properties" : {
            "productGender" : {
              "type" : "string",
              "enum" : [ "MALE", "FEMALE", "UNISEX" ]
            },
            "clothingSize" : {
              "$ref" : "#/components/schemas/SizeDTO"
            },
            "colour" : {
              "type" : "string",
              "enum" : [ "YELLOW", "GREEN", "BLUE", "RED", "BLACK", "WHITE", "MULTICOLOUR" ]
            }
          }
        } ]
      },
      "EntertainmentDTO" : {
        "required" : [ "availability", "condition", "deliveryCost", "entertainmentLanguage", "id", "productCategory", "productCost", "productSize", "seller", "title", "visibility" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProductDTO"
        }, {
          "type" : "object",
          "properties" : {
            "entertainmentLanguage" : {
              "type" : "string",
              "enum" : [ "MULTI_LANGUAGE", "ITALIAN", "FRENCH", "GERMAN", "ENGLISH", "SPANISH", "OTHERS" ]
            }
          }
        } ]
      },
      "HomeDTO" : {
        "required" : [ "availability", "colour", "condition", "deliveryCost", "homeMaterial", "homeSize", "id", "productCategory", "productCost", "productSize", "seller", "title", "visibility" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProductDTO"
        }, {
          "type" : "object",
          "properties" : {
            "colour" : {
              "type" : "string",
              "enum" : [ "YELLOW", "GREEN", "BLUE", "RED", "BLACK", "WHITE", "MULTICOLOUR" ]
            },
            "homeSize" : {
              "$ref" : "#/components/schemas/SizeDTO"
            },
            "homeMaterial" : {
              "type" : "string",
              "enum" : [ "Cotton", "Linen", "Wool", "Acrylic", "Chiffon", "Polyamide_Nylon", "Polyester", "Silk", "Ceramic", "Glass", "Stainless_Steel", "Plastic", "Wood", "Stone", "Porcelain", "Silver", "Metal", "Other" ]
            }
          }
        } ]
      },
      "ProductDTO" : {
        "required" : [ "availability", "condition", "deliveryCost", "id", "productCategory", "productCost", "productSize", "seller", "title", "type", "visibility" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "productCost" : {
            "$ref" : "#/components/schemas/CustomMoneyDTO"
          },
          "deliveryCost" : {
            "$ref" : "#/components/schemas/CustomMoneyDTO"
          },
          "brand" : {
            "type" : "string"
          },
          "condition" : {
            "type" : "string",
            "enum" : [ "NEW_WITH_TAG", "NEW_WITHOUT_TAG", "VERY_GOOD", "GOOD", "ACCEPTABLE" ]
          },
          "likesNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "seller" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          },
          "productSize" : {
            "type" : "string",
            "enum" : [ "BIG", "MEDIUM", "SMALL" ]
          },
          "views" : {
            "type" : "integer",
            "format" : "int32"
          },
          "uploadDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastUpdateDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "visibility" : {
            "type" : "string",
            "enum" : [ "PUBLIC", "PRIVATE" ]
          },
          "availability" : {
            "type" : "string",
            "enum" : [ "AVAILABLE", "PENDING", "UNAVAILABLE" ]
          },
          "productCategory" : {
            "$ref" : "#/components/schemas/ProductCategoryDTO"
          },
          "usersThatLiked" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserBasicDTO"
            }
          },
          "productImages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductImageDTO"
            }
          },
          "type" : {
            "type" : "string"
          }
        },
        "discriminator" : {
          "propertyName" : "type"
        }
      },
      "PaymentMethodDTO" : {
        "required" : [ "creditCard", "expiryDate", "id", "isDefault", "owner" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "creditCard" : {
            "type" : "string"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date"
          },
          "isDefault" : {
            "type" : "boolean"
          },
          "owner" : {
            "type" : "string"
          }
        }
      },
      "AddressDTO" : {
        "required" : [ "city", "country", "header", "id", "isDefault", "phoneNumber", "street", "zipCode" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "header" : {
            "type" : "string"
          },
          "country" : {
            "type" : "string"
          },
          "city" : {
            "type" : "string"
          },
          "street" : {
            "type" : "string"
          },
          "zipCode" : {
            "type" : "string"
          },
          "phoneNumber" : {
            "type" : "string"
          },
          "isDefault" : {
            "type" : "boolean"
          }
        }
      },
      "DeliveryDTO" : {
        "required" : [ "deliveryStatus", "receiverAddress", "sendTime", "senderAddress" ],
        "type" : "object",
        "properties" : {
          "sendTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "deliveredTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "deliveryCost" : {
            "$ref" : "#/components/schemas/CustomMoneyDTO"
          },
          "shipper" : {
            "type" : "string"
          },
          "deliveryStatus" : {
            "type" : "string",
            "enum" : [ "SHIPPED", "DELIVERED" ]
          },
          "senderAddress" : {
            "$ref" : "#/components/schemas/AddressDTO"
          },
          "receiverAddress" : {
            "$ref" : "#/components/schemas/AddressDTO"
          },
          "id" : {
            "type" : "string"
          }
        }
      },
      "OfferBasicDTO" : {
        "required" : [ "amount", "id", "state" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "amount" : {
            "$ref" : "#/components/schemas/CustomMoneyDTO"
          },
          "state" : {
            "type" : "string",
            "enum" : [ "PENDING", "ACCEPTED", "REJECTED", "CANCELLED" ]
          },
          "creationTime" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "OrderDTO" : {
        "required" : [ "id", "product", "state", "user" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "state" : {
            "type" : "string",
            "enum" : [ "CANCELED", "PENDING", "PURCHASED", "SHIPPED", "DELIVERED", "COMPLETED", "REVIEWED" ]
          },
          "orderDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "orderUpdateDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "product" : {
            "$ref" : "#/components/schemas/ProductBasicDTO"
          },
          "user" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          },
          "delivery" : {
            "$ref" : "#/components/schemas/DeliveryDTO"
          },
          "deliveryAddress" : {
            "$ref" : "#/components/schemas/AddressDTO"
          },
          "offer" : {
            "$ref" : "#/components/schemas/OfferBasicDTO"
          },
          "transaction" : {
            "$ref" : "#/components/schemas/TransactionDTO"
          }
        }
      },
      "TransactionDTO" : {
        "required" : [ "amount", "id", "paymentMethod", "paymentMethodOwner", "transactionState" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "creationTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amount" : {
            "$ref" : "#/components/schemas/CustomMoneyDTO"
          },
          "transactionState" : {
            "type" : "string",
            "enum" : [ "REJECTED", "COMPLETED" ]
          },
          "paymentMethod" : {
            "type" : "string"
          },
          "paymentMethodOwner" : {
            "type" : "string"
          }
        }
      },
      "LoginWithGoogleBody" : {
        "type" : "object",
        "properties" : {
          "credential" : {
            "type" : "string"
          },
          "g_csrf_token" : {
            "type" : "string"
          }
        }
      },
      "OrderBasicDTO" : {
        "required" : [ "id", "product", "state" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "state" : {
            "type" : "string",
            "enum" : [ "CANCELED", "PENDING", "PURCHASED", "SHIPPED", "DELIVERED", "COMPLETED", "REVIEWED" ]
          },
          "orderDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "orderUpdateDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "product" : {
            "$ref" : "#/components/schemas/ProductBasicDTO"
          },
          "offer" : {
            "$ref" : "#/components/schemas/OfferBasicDTO"
          }
        }
      },
      "PaymentMethodBasicDTO" : {
        "required" : [ "creditCard", "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "creditCard" : {
            "type" : "string"
          },
          "default" : {
            "type" : "boolean"
          }
        }
      },
      "TransactionCreateDTO" : {
        "required" : [ "order", "paymentMethod" ],
        "type" : "object",
        "properties" : {
          "paymentMethod" : {
            "$ref" : "#/components/schemas/PaymentMethodBasicDTO"
          },
          "order" : {
            "$ref" : "#/components/schemas/OrderBasicDTO"
          }
        }
      },
      "UserDTO" : {
        "required" : [ "email", "id", "provider", "role", "status", "username" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "username" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "bio" : {
            "type" : "string"
          },
          "photoProfile" : {
            "$ref" : "#/components/schemas/UserImageDTO"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "LOCAL", "KEYCLOAK", "GOOGLE" ]
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "BANNED", "HIDDEN", "HOLIDAY", "CANCELLED" ]
          },
          "addresses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AddressDTO"
            }
          },
          "paymentMethods" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentMethodDTO"
            }
          },
          "role" : {
            "type" : "string",
            "enum" : [ "ADMIN", "USER", "SUPER_ADMIN" ]
          },
          "reviewsTotalSum" : {
            "type" : "integer",
            "format" : "int32"
          },
          "reviewsNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "followersNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "followingNumber" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "ReviewCreateDTO" : {
        "required" : [ "orderId", "reviewed", "title", "vote" ],
        "type" : "object",
        "properties" : {
          "orderId" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "vote" : {
            "maximum" : 5,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32"
          },
          "reviewed" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          }
        }
      },
      "ClothingCreateDTO" : {
        "required" : [ "clothingSize", "colour", "condition", "deliveryCost", "productCategory", "productCost", "productGender", "productSize", "title", "visibility" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProductCreateDTO"
        }, {
          "type" : "object",
          "properties" : {
            "productGender" : {
              "type" : "string",
              "enum" : [ "MALE", "FEMALE", "UNISEX" ]
            },
            "clothingSize" : {
              "$ref" : "#/components/schemas/SizeDTO"
            },
            "colour" : {
              "type" : "string",
              "enum" : [ "YELLOW", "GREEN", "BLUE", "RED", "BLACK", "WHITE", "MULTICOLOUR" ]
            }
          }
        } ]
      },
      "EntertainmentCreateDTO" : {
        "required" : [ "condition", "deliveryCost", "entertainmentLanguage", "productCategory", "productCost", "productSize", "title", "visibility" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProductCreateDTO"
        }, {
          "type" : "object",
          "properties" : {
            "entertainmentLanguage" : {
              "type" : "string",
              "enum" : [ "MULTI_LANGUAGE", "ITALIAN", "FRENCH", "GERMAN", "ENGLISH", "SPANISH", "OTHERS" ]
            }
          }
        } ]
      },
      "HomeCreateDTO" : {
        "required" : [ "colour", "condition", "deliveryCost", "homeMaterial", "homeSize", "productCategory", "productCost", "productSize", "title", "visibility" ],
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProductCreateDTO"
        }, {
          "type" : "object",
          "properties" : {
            "colour" : {
              "type" : "string",
              "enum" : [ "YELLOW", "GREEN", "BLUE", "RED", "BLACK", "WHITE", "MULTICOLOUR" ]
            },
            "homeSize" : {
              "$ref" : "#/components/schemas/SizeDTO"
            },
            "homeMaterial" : {
              "type" : "string",
              "enum" : [ "Cotton", "Linen", "Wool", "Acrylic", "Chiffon", "Polyamide_Nylon", "Polyester", "Silk", "Ceramic", "Glass", "Stainless_Steel", "Plastic", "Wood", "Stone", "Porcelain", "Silver", "Metal", "Other" ]
            }
          }
        } ]
      },
      "ProductCreateDTO" : {
        "required" : [ "condition", "deliveryCost", "productCategory", "productCost", "productSize", "title", "type", "visibility" ],
        "type" : "object",
        "properties" : {
          "title" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "productCost" : {
            "$ref" : "#/components/schemas/CustomMoneyDTO"
          },
          "deliveryCost" : {
            "$ref" : "#/components/schemas/CustomMoneyDTO"
          },
          "brand" : {
            "type" : "string"
          },
          "condition" : {
            "type" : "string",
            "enum" : [ "NEW_WITH_TAG", "NEW_WITHOUT_TAG", "VERY_GOOD", "GOOD", "ACCEPTABLE" ]
          },
          "productSize" : {
            "type" : "string",
            "enum" : [ "BIG", "MEDIUM", "SMALL" ]
          },
          "visibility" : {
            "type" : "string",
            "enum" : [ "PUBLIC", "PRIVATE" ]
          },
          "productCategory" : {
            "$ref" : "#/components/schemas/ProductCategoryDTO"
          },
          "type" : {
            "type" : "string"
          }
        },
        "discriminator" : {
          "propertyName" : "type"
        }
      },
      "CapabilityDTO" : {
        "type" : "object",
        "properties" : {
          "capabilityToken" : {
            "type" : "string"
          },
          "capabilityUrl" : {
            "type" : "string"
          }
        }
      },
      "PaymentMethodCreateDTO" : {
        "required" : [ "creditCard", "expiryDate", "isDefault", "owner" ],
        "type" : "object",
        "properties" : {
          "creditCard" : {
            "type" : "string"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date"
          },
          "isDefault" : {
            "type" : "boolean"
          },
          "owner" : {
            "type" : "string"
          }
        }
      },
      "OrderCreateDTO" : {
        "required" : [ "deliveryAddress", "product" ],
        "type" : "object",
        "properties" : {
          "product" : {
            "$ref" : "#/components/schemas/ProductBasicDTO"
          },
          "offer" : {
            "$ref" : "#/components/schemas/OfferBasicDTO"
          },
          "deliveryAddress" : {
            "$ref" : "#/components/schemas/AddressDTO"
          }
        }
      },
      "OfferCreateDTO" : {
        "required" : [ "amount", "product" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/CustomMoneyDTO"
          },
          "product" : {
            "$ref" : "#/components/schemas/ProductBasicDTO"
          }
        }
      },
      "OfferDTO" : {
        "required" : [ "amount", "id", "offerer", "product", "state" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "amount" : {
            "$ref" : "#/components/schemas/CustomMoneyDTO"
          },
          "creationTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "state" : {
            "type" : "string",
            "enum" : [ "PENDING", "ACCEPTED", "REJECTED", "CANCELLED" ]
          },
          "offerer" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          },
          "product" : {
            "$ref" : "#/components/schemas/ProductBasicDTO"
          }
        }
      },
      "NotificationDTO" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "receiver" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          },
          "userTarget" : {
            "type" : "string"
          },
          "productTarget" : {
            "type" : "string"
          },
          "offerTarget" : {
            "type" : "string"
          },
          "reviewTarget" : {
            "type" : "string"
          },
          "text" : {
            "type" : "string"
          },
          "read" : {
            "type" : "boolean"
          },
          "date" : {
            "type" : "string",
            "format" : "date-time"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "NEW_OFFER", "OFFER_REJECTED", "OFFER_ACCEPTED", "OFFER_CANCELED", "REVIEW", "MESSAGE", "SALE", "PURCHASE", "PRODUCT_SOLD", "NEW_PRODUCT", "FOLLOW", "USER", "NEW_FAVORITE" ]
          }
        }
      },
      "MessageCreateDTO" : {
        "required" : [ "receivedUser", "text" ],
        "type" : "object",
        "properties" : {
          "conversationId" : {
            "type" : "string"
          },
          "text" : {
            "type" : "string"
          },
          "product" : {
            "$ref" : "#/components/schemas/ProductBasicDTO"
          },
          "receivedUser" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          }
        }
      },
      "MessageDTO" : {
        "required" : [ "receivedUser", "sendUser", "text" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "conversationId" : {
            "type" : "string"
          },
          "text" : {
            "type" : "string"
          },
          "messageDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "messageStatus" : {
            "type" : "string",
            "enum" : [ "READ", "UNREAD" ]
          },
          "product" : {
            "$ref" : "#/components/schemas/ProductBasicDTO"
          },
          "sendUser" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          },
          "receivedUser" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          },
          "offer" : {
            "$ref" : "#/components/schemas/OfferBasicDTO"
          }
        }
      },
      "FollowingFollowersDTO" : {
        "required" : [ "follower", "following" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "followingFrom" : {
            "type" : "string",
            "format" : "date-time"
          },
          "follower" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          },
          "following" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          }
        }
      },
      "DeliveryCreateDTO" : {
        "required" : [ "order", "senderAddressId" ],
        "type" : "object",
        "properties" : {
          "order" : {
            "$ref" : "#/components/schemas/OrderBasicDTO"
          },
          "shipper" : {
            "type" : "string"
          },
          "senderAddressId" : {
            "type" : "string"
          }
        }
      },
      "AddressCreateDTO" : {
        "required" : [ "city", "country", "header", "isDefault", "phoneNumber", "street", "zipCode" ],
        "type" : "object",
        "properties" : {
          "header" : {
            "type" : "string"
          },
          "country" : {
            "type" : "string"
          },
          "city" : {
            "type" : "string"
          },
          "street" : {
            "type" : "string"
          },
          "zipCode" : {
            "type" : "string"
          },
          "phoneNumber" : {
            "type" : "string"
          },
          "isDefault" : {
            "type" : "boolean"
          }
        }
      },
      "PageUserBasicDTO" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserBasicDTO"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "PageableObject" : {
        "type" : "object",
        "properties" : {
          "offset" : {
            "type" : "integer",
            "format" : "int64"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageSize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "paged" : {
            "type" : "boolean"
          },
          "unpaged" : {
            "type" : "boolean"
          }
        }
      },
      "SortObject" : {
        "type" : "object",
        "properties" : {
          "empty" : {
            "type" : "boolean"
          },
          "sorted" : {
            "type" : "boolean"
          },
          "unsorted" : {
            "type" : "boolean"
          }
        }
      },
      "PageOrderBasicDTO" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OrderBasicDTO"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "PageOfferBasicDTO" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OfferBasicDTO"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "PageProductBasicDTO" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductBasicDTO"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "PageReviewDTO" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReviewDTO"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "PageReportDTO" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReportDTO"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "PageMessageDTO" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MessageDTO"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "Address" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "header" : {
            "type" : "string"
          },
          "country" : {
            "type" : "string"
          },
          "city" : {
            "type" : "string"
          },
          "street" : {
            "type" : "string"
          },
          "zipCode" : {
            "type" : "string"
          },
          "phoneNumber" : {
            "type" : "string"
          },
          "orders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Order"
            }
          },
          "user" : {
            "$ref" : "#/components/schemas/User"
          },
          "sentDeliveries" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Delivery"
            }
          },
          "receivedDeliveries" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Delivery"
            }
          },
          "default" : {
            "type" : "boolean"
          }
        }
      },
      "CurrencyUnit" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "numericCode" : {
            "type" : "integer",
            "format" : "int32"
          },
          "decimalPlaces" : {
            "type" : "integer",
            "format" : "int32"
          },
          "symbol" : {
            "type" : "string"
          },
          "numeric3Code" : {
            "type" : "string"
          },
          "countryCodes" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "pseudoCurrency" : {
            "type" : "boolean"
          }
        }
      },
      "CustomMoney" : {
        "type" : "object",
        "properties" : {
          "price" : {
            "type" : "number",
            "format" : "double"
          },
          "currency" : {
            "type" : "string",
            "enum" : [ "EUR", "USD" ]
          },
          "money" : {
            "$ref" : "#/components/schemas/Money"
          }
        }
      },
      "Delivery" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "order" : {
            "$ref" : "#/components/schemas/Order"
          },
          "sendTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "deliveredTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "deliveryCost" : {
            "$ref" : "#/components/schemas/CustomMoney"
          },
          "shipper" : {
            "type" : "string"
          },
          "deliveryStatus" : {
            "type" : "string",
            "enum" : [ "SHIPPED", "DELIVERED" ]
          },
          "senderAddress" : {
            "$ref" : "#/components/schemas/Address"
          },
          "receiverAddress" : {
            "$ref" : "#/components/schemas/Address"
          }
        }
      },
      "Following" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "followingFrom" : {
            "type" : "string",
            "format" : "date-time"
          },
          "follower" : {
            "$ref" : "#/components/schemas/User"
          },
          "following" : {
            "$ref" : "#/components/schemas/User"
          }
        }
      },
      "GrantedAuthority" : {
        "type" : "object",
        "properties" : {
          "authority" : {
            "type" : "string"
          }
        }
      },
      "Message" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "text" : {
            "type" : "string"
          },
          "conversationId" : {
            "type" : "string"
          },
          "messageDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "messageStatus" : {
            "type" : "string",
            "enum" : [ "READ", "UNREAD" ]
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          },
          "sendUser" : {
            "$ref" : "#/components/schemas/User"
          },
          "receivedUser" : {
            "$ref" : "#/components/schemas/User"
          },
          "offer" : {
            "$ref" : "#/components/schemas/Offer"
          }
        }
      },
      "Money" : {
        "type" : "object",
        "properties" : {
          "zero" : {
            "type" : "boolean"
          },
          "negative" : {
            "type" : "boolean"
          },
          "positive" : {
            "type" : "boolean"
          },
          "amount" : {
            "type" : "number"
          },
          "scale" : {
            "type" : "integer",
            "format" : "int32"
          },
          "currencyUnit" : {
            "$ref" : "#/components/schemas/CurrencyUnit"
          },
          "amountMajor" : {
            "type" : "number"
          },
          "amountMajorLong" : {
            "type" : "integer",
            "format" : "int64"
          },
          "amountMajorInt" : {
            "type" : "integer",
            "format" : "int32"
          },
          "amountMinor" : {
            "type" : "number"
          },
          "amountMinorLong" : {
            "type" : "integer",
            "format" : "int64"
          },
          "amountMinorInt" : {
            "type" : "integer",
            "format" : "int32"
          },
          "minorPart" : {
            "type" : "integer",
            "format" : "int32"
          },
          "positiveOrZero" : {
            "type" : "boolean"
          },
          "negativeOrZero" : {
            "type" : "boolean"
          }
        }
      },
      "Notification" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "receiver" : {
            "$ref" : "#/components/schemas/User"
          },
          "userTarget" : {
            "type" : "string"
          },
          "productTarget" : {
            "type" : "string"
          },
          "offerTarget" : {
            "type" : "string"
          },
          "reviewTarget" : {
            "type" : "string"
          },
          "text" : {
            "type" : "string"
          },
          "read" : {
            "type" : "boolean"
          },
          "date" : {
            "type" : "string",
            "format" : "date-time"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "NEW_OFFER", "OFFER_REJECTED", "OFFER_ACCEPTED", "OFFER_CANCELED", "REVIEW", "MESSAGE", "SALE", "PURCHASE", "PRODUCT_SOLD", "NEW_PRODUCT", "FOLLOW", "USER", "NEW_FAVORITE" ]
          }
        }
      },
      "Offer" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "amount" : {
            "$ref" : "#/components/schemas/CustomMoney"
          },
          "creationTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "state" : {
            "type" : "string",
            "enum" : [ "PENDING", "ACCEPTED", "REJECTED", "CANCELLED" ]
          },
          "offerer" : {
            "$ref" : "#/components/schemas/User"
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          },
          "message" : {
            "$ref" : "#/components/schemas/Message"
          },
          "order" : {
            "$ref" : "#/components/schemas/Order"
          }
        }
      },
      "Order" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "orderDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "orderUpdateDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "state" : {
            "type" : "string",
            "enum" : [ "CANCELED", "PENDING", "PURCHASED", "SHIPPED", "DELIVERED", "COMPLETED", "REVIEWED" ]
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          },
          "user" : {
            "$ref" : "#/components/schemas/User"
          },
          "delivery" : {
            "$ref" : "#/components/schemas/Delivery"
          },
          "deliveryAddress" : {
            "$ref" : "#/components/schemas/Address"
          },
          "offer" : {
            "$ref" : "#/components/schemas/Offer"
          },
          "transaction" : {
            "$ref" : "#/components/schemas/Transaction"
          }
        }
      },
      "PaymentMethod" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "creditCard" : {
            "type" : "string"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date"
          },
          "owner" : {
            "type" : "string"
          },
          "ownerUser" : {
            "$ref" : "#/components/schemas/User"
          },
          "default" : {
            "type" : "boolean"
          }
        }
      },
      "Product" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "productCost" : {
            "$ref" : "#/components/schemas/CustomMoney"
          },
          "deliveryCost" : {
            "$ref" : "#/components/schemas/CustomMoney"
          },
          "brand" : {
            "type" : "string"
          },
          "condition" : {
            "type" : "string",
            "enum" : [ "NEW_WITH_TAG", "NEW_WITHOUT_TAG", "VERY_GOOD", "GOOD", "ACCEPTABLE" ]
          },
          "productSize" : {
            "type" : "string",
            "enum" : [ "BIG", "MEDIUM", "SMALL" ]
          },
          "views" : {
            "type" : "integer",
            "format" : "int32"
          },
          "uploadDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastUpdateDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "visibility" : {
            "type" : "string",
            "enum" : [ "PUBLIC", "PRIVATE" ]
          },
          "availability" : {
            "type" : "string",
            "enum" : [ "AVAILABLE", "PENDING", "UNAVAILABLE" ]
          },
          "productCategory" : {
            "$ref" : "#/components/schemas/ProductCategory"
          },
          "likesNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "seller" : {
            "$ref" : "#/components/schemas/User"
          },
          "usersThatLiked" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/User"
            }
          },
          "offers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Offer"
            }
          },
          "messages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Message"
            }
          },
          "order" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Order"
            }
          },
          "productImages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProductImage"
            }
          },
          "reports" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Report"
            }
          }
        }
      },
      "ProductCategory" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "primaryCat" : {
            "type" : "string"
          },
          "secondaryCat" : {
            "type" : "string"
          },
          "tertiaryCat" : {
            "type" : "string"
          },
          "visibility" : {
            "type" : "string",
            "enum" : [ "PUBLIC", "PRIVATE" ]
          },
          "products" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Product"
            }
          }
        }
      },
      "ProductImage" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "urlPhoto" : {
            "type" : "string"
          },
          "product" : {
            "$ref" : "#/components/schemas/Product"
          }
        }
      },
      "Report" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "reporterUser" : {
            "$ref" : "#/components/schemas/User"
          },
          "description" : {
            "type" : "string"
          },
          "reportedUser" : {
            "$ref" : "#/components/schemas/User"
          },
          "reportedProduct" : {
            "$ref" : "#/components/schemas/Product"
          },
          "date" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "PENDING", "CLOSED" ]
          },
          "adminFollowedReport" : {
            "$ref" : "#/components/schemas/User"
          }
        }
      },
      "Review" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "date" : {
            "type" : "string",
            "format" : "date-time"
          },
          "title" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "vote" : {
            "type" : "integer",
            "format" : "int32"
          },
          "reviewer" : {
            "$ref" : "#/components/schemas/User"
          },
          "reviewed" : {
            "$ref" : "#/components/schemas/User"
          }
        }
      },
      "Transaction" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "creationTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "amount" : {
            "$ref" : "#/components/schemas/CustomMoney"
          },
          "transactionState" : {
            "type" : "string",
            "enum" : [ "REJECTED", "COMPLETED" ]
          },
          "paymentMethod" : {
            "type" : "string"
          },
          "paymentMethodOwner" : {
            "type" : "string"
          },
          "order" : {
            "$ref" : "#/components/schemas/Order"
          }
        }
      },
      "User" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "username" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "bio" : {
            "type" : "string"
          },
          "photoProfile" : {
            "$ref" : "#/components/schemas/UserImage"
          },
          "provider" : {
            "type" : "string",
            "enum" : [ "LOCAL", "KEYCLOAK", "GOOGLE" ]
          },
          "addresses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Address"
            }
          },
          "role" : {
            "type" : "string",
            "enum" : [ "ADMIN", "USER", "SUPER_ADMIN" ]
          },
          "emailVerified" : {
            "type" : "boolean"
          },
          "paymentMethods" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentMethod"
            }
          },
          "offersMade" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Offer"
            }
          },
          "sellingProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Product"
            }
          },
          "followers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Following"
            }
          },
          "following" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Following"
            }
          },
          "followersNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "followingNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "reviewsTotalSum" : {
            "type" : "integer",
            "format" : "int32"
          },
          "reviewsNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "likedProducts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Product"
            }
          },
          "sentMessages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Message"
            }
          },
          "receivedMessages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Message"
            }
          },
          "orders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Order"
            }
          },
          "receivedReviews" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Review"
            }
          },
          "sentReviews" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Review"
            }
          },
          "status" : {
            "type" : "string",
            "enum" : [ "ACTIVE", "BANNED", "HIDDEN", "HOLIDAY", "CANCELLED" ]
          },
          "reports" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Report"
            }
          },
          "reported" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Report"
            }
          },
          "adminFollowedMyReport" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Report"
            }
          },
          "notifications" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Notification"
            }
          },
          "enabled" : {
            "type" : "boolean"
          },
          "administrator" : {
            "type" : "boolean"
          },
          "authorities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GrantedAuthority"
            }
          },
          "accountNonExpired" : {
            "type" : "boolean"
          },
          "accountNonLocked" : {
            "type" : "boolean"
          },
          "credentialsNonExpired" : {
            "type" : "boolean"
          }
        }
      },
      "UserImage" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "urlPhoto" : {
            "type" : "string"
          },
          "user" : {
            "$ref" : "#/components/schemas/User"
          }
        }
      },
      "PagePaymentMethodBasicDTO" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentMethodBasicDTO"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "PageNotificationDTO" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/NotificationDTO"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "ConversationDTO" : {
        "required" : [ "lastMessage", "otherUser", "unreadMessages" ],
        "type" : "object",
        "properties" : {
          "productBasicDTO" : {
            "$ref" : "#/components/schemas/ProductBasicDTO"
          },
          "otherUser" : {
            "$ref" : "#/components/schemas/UserBasicDTO"
          },
          "lastMessage" : {
            "$ref" : "#/components/schemas/MessageDTO"
          },
          "unreadMessages" : {
            "type" : "boolean"
          },
          "conversationId" : {
            "type" : "string"
          }
        }
      },
      "PageFollowingFollowersDTO" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FollowingFollowersDTO"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "PageUserDTO" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserDTO"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      }
    },
    "securitySchemes" : {
      "App_Bearer_token" : {
        "type" : "http",
        "in" : "header",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      }
    }
  }
}}; TIME TAKEN={13} 
23:53:38.156 [34mINFO [0;39m [35mmyLogger[0;39m - 
FINISHED PROCESSING : METHOD={GET}; REQUESTURI={/api/v1/products/categories}; REMOTEADDR={127.0.0.1};
REQUEST PAYLOAD={};
LOGGED USERNAME={}; RESPONSE CODE={200};
RESPONSE={[ {
  "id" : "8d7a46c2-5506-4728-8e50-78c625b3a159",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Cloths",
  "tertiaryCat" : "Jeans"
}, {
  "id" : "c1f626a1-5328-4213-a2be-e30761f9bad2",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Cloths",
  "tertiaryCat" : "Dress"
}, {
  "id" : "d71d125b-24ff-4718-85ee-d3b5e9dbfe33",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Cloths",
  "tertiaryCat" : "Skirt"
}, {
  "id" : "ab28305f-ac34-48d8-b67b-3d377d19b3bb",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Cloths",
  "tertiaryCat" : "T Shirt"
}, {
  "id" : "06c71a1f-1097-42d2-b62d-05ba4389877b",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Cloths",
  "tertiaryCat" : "Sweaters"
}, {
  "id" : "1f9bf906-de5d-4f51-8a9d-c3a16eedad1c",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Cloths",
  "tertiaryCat" : "Trousers"
}, {
  "id" : "e4c8ec06-e3e7-4eec-acc7-8d98e460af7e",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Shoes",
  "tertiaryCat" : "Boots"
}, {
  "id" : "500acf6c-2202-498d-aac5-dca197bdb43e",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Shoes",
  "tertiaryCat" : "Heels"
}, {
  "id" : "5deb55d8-6857-4949-98af-61ac74716566",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Shoes",
  "tertiaryCat" : "Sport"
}, {
  "id" : "9cbf065f-fe1f-49e3-9d6e-42f1a302cd6f",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Shoes",
  "tertiaryCat" : "Trainers"
}, {
  "id" : "c2bccb95-6875-4942-a54a-c01034962726",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Shoes",
  "tertiaryCat" : "Sandals"
}, {
  "id" : "5009fe57-01c1-423f-b776-d02394a84cf5",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Bags",
  "tertiaryCat" : "Shoulder bag"
}, {
  "id" : "2b004296-af9a-4825-8f4b-14e1c3364003",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Bags",
  "tertiaryCat" : "Handbags"
}, {
  "id" : "f3649101-0bb8-4fb5-a540-012d8dca5ca5",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Bags",
  "tertiaryCat" : "Luggage"
}, {
  "id" : "f6e96d7e-c20f-45cb-8219-59fd5a46e518",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Bags",
  "tertiaryCat" : "Backpacks"
}, {
  "id" : "008fcbfe-994d-4fa1-814c-8e4b1b947b72",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Accessories",
  "tertiaryCat" : "Watches"
}, {
  "id" : "9b75bdff-c3a2-4367-aece-80905ae028e4",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Accessories",
  "tertiaryCat" : "Sunglasses"
}, {
  "id" : "d3f2a29a-a651-4cf7-96b2-ebd4cfd9efb3",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Accessories",
  "tertiaryCat" : "Belts"
}, {
  "id" : "0b9fba03-70dd-43b0-a6cc-4e94b966b256",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Accessories",
  "tertiaryCat" : "Hats Caps"
}, {
  "id" : "46d8a6ab-bd88-48fb-9c2c-0aab62d476bf",
  "primaryCat" : "Entertainment",
  "secondaryCat" : "Gaming",
  "tertiaryCat" : "XBox One"
}, {
  "id" : "0302c06e-225c-4303-a950-5efb8917f871",
  "primaryCat" : "Entertainment",
  "secondaryCat" : "Gaming",
  "tertiaryCat" : "PS Five"
}, {
  "id" : "c6c3e2e6-792d-42a5-8e9e-9227d3fd5df5",
  "primaryCat" : "Entertainment",
  "secondaryCat" : "Gaming",
  "tertiaryCat" : "PS Older"
}, {
  "id" : "57afc8b1-85bd-4c4d-87b0-76db92ba22a8",
  "primaryCat" : "Entertainment",
  "secondaryCat" : "Gaming",
  "tertiaryCat" : "PC"
}, {
  "id" : "89fa2492-8bdf-4e53-8ad2-a2b52a6dd1e2",
  "primaryCat" : "Entertainment",
  "secondaryCat" : "Media",
  "tertiaryCat" : "Music"
}, {
  "id" : "b9950b1b-8714-4667-b083-f511692c55fd",
  "primaryCat" : "Entertainment",
  "secondaryCat" : "Media",
  "tertiaryCat" : "Video"
}, {
  "id" : "d6cb8960-b6f0-4c6d-bfda-aeb500346c9d",
  "primaryCat" : "Entertainment",
  "secondaryCat" : "Books",
  "tertiaryCat" : "Non Fiction"
}, {
  "id" : "87fbcef4-6d66-447e-9d75-4d1c5d6c68b5",
  "primaryCat" : "Entertainment",
  "secondaryCat" : "Books",
  "tertiaryCat" : "Kids"
}, {
  "id" : "8fcb219a-0b2c-4dc4-b30b-478c5af11907",
  "primaryCat" : "Entertainment",
  "secondaryCat" : "Books",
  "tertiaryCat" : "Literature"
}, {
  "id" : "27588e1d-8d3e-496c-abfd-d67c8a19d6d6",
  "primaryCat" : "Entertainment",
  "secondaryCat" : "Books",
  "tertiaryCat" : "Fiction"
}, {
  "id" : "06793f36-270c-418a-b3b4-242941878d81",
  "primaryCat" : "Home",
  "secondaryCat" : "Textiles",
  "tertiaryCat" : "Blankets"
}, {
  "id" : "6395707d-e52a-424b-8901-0b75b567e6fc",
  "primaryCat" : "Home",
  "secondaryCat" : "Textiles",
  "tertiaryCat" : "Cushions"
}, {
  "id" : "0652e385-73f8-43b0-be7c-06dd035e8755",
  "primaryCat" : "Home",
  "secondaryCat" : "Textiles",
  "tertiaryCat" : "Table Linen"
}, {
  "id" : "96f2e65c-ffc1-4877-bd17-0866f9ace2ee",
  "primaryCat" : "Home",
  "secondaryCat" : "Textiles",
  "tertiaryCat" : "Towel"
}, {
  "id" : "31a94357-1167-4230-ab1d-f5a95fbd3074",
  "primaryCat" : "Home",
  "secondaryCat" : "Textiles",
  "tertiaryCat" : "Bedding"
}, {
  "id" : "a3a418f1-210a-4673-9a9b-acc901e1f775",
  "primaryCat" : "Home",
  "secondaryCat" : "Home Accessories",
  "tertiaryCat" : "Cooks"
}, {
  "id" : "d0a58626-6488-43d1-8b03-1e791d9a2529",
  "primaryCat" : "Home",
  "secondaryCat" : "Home Accessories",
  "tertiaryCat" : "Picture"
}, {
  "id" : "02c4d0a3-50c2-40c0-bc5e-db64b7df3c08",
  "primaryCat" : "Home",
  "secondaryCat" : "Home Accessories",
  "tertiaryCat" : "Photo Frames"
}, {
  "id" : "5e12cc98-7d54-4689-a1e9-b130b84d19e3",
  "primaryCat" : "Home",
  "secondaryCat" : "Home Accessories",
  "tertiaryCat" : "Storage"
}, {
  "id" : "0267e0ca-5ecc-4e27-87e4-68d02db91a17",
  "primaryCat" : "Home",
  "secondaryCat" : "Home Accessories",
  "tertiaryCat" : "Mirrors"
}, {
  "id" : "64ca0e64-3cde-4805-9c7e-0713f2c3f459",
  "primaryCat" : "Home",
  "secondaryCat" : "Home Accessories",
  "tertiaryCat" : "Vases"
}, {
  "id" : "25429e86-f654-4e96-a506-08092fa7ca44",
  "primaryCat" : "Home",
  "secondaryCat" : "Tableware",
  "tertiaryCat" : "Dinnerware"
}, {
  "id" : "efa32f23-94e2-4c9e-a3b2-235381e41392",
  "primaryCat" : "Home",
  "secondaryCat" : "Tableware",
  "tertiaryCat" : "Cutlery"
}, {
  "id" : "74f36382-6476-494e-aae8-e7eb6b766476",
  "primaryCat" : "Home",
  "secondaryCat" : "Tableware",
  "tertiaryCat" : "Drink ware"
}, {
  "id" : "6e6ea558-c373-49df-997b-3df7afe751f3",
  "primaryCat" : "Other",
  "secondaryCat" : "Other#2",
  "tertiaryCat" : "Other#3"
} ]}; TIME TAKEN={214} 
23:53:56.188 [34mINFO [0;39m [35mmyLogger[0;39m - 
FINISHED PROCESSING : METHOD={GET}; REQUESTURI={/api/v1/products/categories}; REMOTEADDR={127.0.0.1};
REQUEST PAYLOAD={};
LOGGED USERNAME={}; RESPONSE CODE={200};
RESPONSE={[ {
  "id" : "8d7a46c2-5506-4728-8e50-78c625b3a159",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Cloths",
  "tertiaryCat" : "Jeans"
}, {
  "id" : "c1f626a1-5328-4213-a2be-e30761f9bad2",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Cloths",
  "tertiaryCat" : "Dress"
}, {
  "id" : "d71d125b-24ff-4718-85ee-d3b5e9dbfe33",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Cloths",
  "tertiaryCat" : "Skirt"
}, {
  "id" : "ab28305f-ac34-48d8-b67b-3d377d19b3bb",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Cloths",
  "tertiaryCat" : "T Shirt"
}, {
  "id" : "06c71a1f-1097-42d2-b62d-05ba4389877b",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Cloths",
  "tertiaryCat" : "Sweaters"
}, {
  "id" : "1f9bf906-de5d-4f51-8a9d-c3a16eedad1c",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Cloths",
  "tertiaryCat" : "Trousers"
}, {
  "id" : "e4c8ec06-e3e7-4eec-acc7-8d98e460af7e",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Shoes",
  "tertiaryCat" : "Boots"
}, {
  "id" : "500acf6c-2202-498d-aac5-dca197bdb43e",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Shoes",
  "tertiaryCat" : "Heels"
}, {
  "id" : "5deb55d8-6857-4949-98af-61ac74716566",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Shoes",
  "tertiaryCat" : "Sport"
}, {
  "id" : "9cbf065f-fe1f-49e3-9d6e-42f1a302cd6f",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Shoes",
  "tertiaryCat" : "Trainers"
}, {
  "id" : "c2bccb95-6875-4942-a54a-c01034962726",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Shoes",
  "tertiaryCat" : "Sandals"
}, {
  "id" : "5009fe57-01c1-423f-b776-d02394a84cf5",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Bags",
  "tertiaryCat" : "Shoulder bag"
}, {
  "id" : "2b004296-af9a-4825-8f4b-14e1c3364003",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Bags",
  "tertiaryCat" : "Handbags"
}, {
  "id" : "f3649101-0bb8-4fb5-a540-012d8dca5ca5",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Bags",
  "tertiaryCat" : "Luggage"
}, {
  "id" : "f6e96d7e-c20f-45cb-8219-59fd5a46e518",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Bags",
  "tertiaryCat" : "Backpacks"
}, {
  "id" : "008fcbfe-994d-4fa1-814c-8e4b1b947b72",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Accessories",
  "tertiaryCat" : "Watches"
}, {
  "id" : "9b75bdff-c3a2-4367-aece-80905ae028e4",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Accessories",
  "tertiaryCat" : "Sunglasses"
}, {
  "id" : "d3f2a29a-a651-4cf7-96b2-ebd4cfd9efb3",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Accessories",
  "tertiaryCat" : "Belts"
}, {
  "id" : "0b9fba03-70dd-43b0-a6cc-4e94b966b256",
  "primaryCat" : "Clothing",
  "secondaryCat" : "Accessories",
  "tertiaryCat" : "Hats Caps"
}, {
  "id" : "46d8a6ab-bd88-48fb-9c2c-0aab62d476bf",
  "primaryCat" : "Entertainment",
  "secondaryCat" : "Gaming",
  "tertiaryCat" : "XBox One"
}, {
  "id" : "0302c06e-225c-4303-a950-5efb8917f871",
  "primaryCat" : "Entertainment",
  "secondaryCat" : "Gaming",
  "tertiaryCat" : "PS Five"
}, {
  "id" : "c6c3e2e6-792d-42a5-8e9e-9227d3fd5df5",
  "primaryCat" : "Entertainment",
  "secondaryCat" : "Gaming",
  "tertiaryCat" : "PS Older"
}, {
  "id" : "57afc8b1-85bd-4c4d-87b0-76db92ba22a8",
  "primaryCat" : "Entertainment",
  "secondaryCat" : "Gaming",
  "tertiaryCat" : "PC"
}, {
  "id" : "89fa2492-8bdf-4e53-8ad2-a2b52a6dd1e2",
  "primaryCat" : "Entertainment",
  "secondaryCat" : "Media",
  "tertiaryCat" : "Music"
}, {
  "id" : "b9950b1b-8714-4667-b083-f511692c55fd",
  "primaryCat" : "Entertainment",
  "secondaryCat" : "Media",
  "tertiaryCat" : "Video"
}, {
  "id" : "d6cb8960-b6f0-4c6d-bfda-aeb500346c9d",
  "primaryCat" : "Entertainment",
  "secondaryCat" : "Books",
  "tertiaryCat" : "Non Fiction"
}, {
  "id" : "87fbcef4-6d66-447e-9d75-4d1c5d6c68b5",
  "primaryCat" : "Entertainment",
  "secondaryCat" : "Books",
  "tertiaryCat" : "Kids"
}, {
  "id" : "8fcb219a-0b2c-4dc4-b30b-478c5af11907",
  "primaryCat" : "Entertainment",
  "secondaryCat" : "Books",
  "tertiaryCat" : "Literature"
}, {
  "id" : "27588e1d-8d3e-496c-abfd-d67c8a19d6d6",
  "primaryCat" : "Entertainment",
  "secondaryCat" : "Books",
  "tertiaryCat" : "Fiction"
}, {
  "id" : "06793f36-270c-418a-b3b4-242941878d81",
  "primaryCat" : "Home",
  "secondaryCat" : "Textiles",
  "tertiaryCat" : "Blankets"
}, {
  "id" : "6395707d-e52a-424b-8901-0b75b567e6fc",
  "primaryCat" : "Home",
  "secondaryCat" : "Textiles",
  "tertiaryCat" : "Cushions"
}, {
  "id" : "0652e385-73f8-43b0-be7c-06dd035e8755",
  "primaryCat" : "Home",
  "secondaryCat" : "Textiles",
  "tertiaryCat" : "Table Linen"
}, {
  "id" : "96f2e65c-ffc1-4877-bd17-0866f9ace2ee",
  "primaryCat" : "Home",
  "secondaryCat" : "Textiles",
  "tertiaryCat" : "Towel"
}, {
  "id" : "31a94357-1167-4230-ab1d-f5a95fbd3074",
  "primaryCat" : "Home",
  "secondaryCat" : "Textiles",
  "tertiaryCat" : "Bedding"
}, {
  "id" : "a3a418f1-210a-4673-9a9b-acc901e1f775",
  "primaryCat" : "Home",
  "secondaryCat" : "Home Accessories",
  "tertiaryCat" : "Cooks"
}, {
  "id" : "d0a58626-6488-43d1-8b03-1e791d9a2529",
  "primaryCat" : "Home",
  "secondaryCat" : "Home Accessories",
  "tertiaryCat" : "Picture"
}, {
  "id" : "02c4d0a3-50c2-40c0-bc5e-db64b7df3c08",
  "primaryCat" : "Home",
  "secondaryCat" : "Home Accessories",
  "tertiaryCat" : "Photo Frames"
}, {
  "id" : "5e12cc98-7d54-4689-a1e9-b130b84d19e3",
  "primaryCat" : "Home",
  "secondaryCat" : "Home Accessories",
  "tertiaryCat" : "Storage"
}, {
  "id" : "0267e0ca-5ecc-4e27-87e4-68d02db91a17",
  "primaryCat" : "Home",
  "secondaryCat" : "Home Accessories",
  "tertiaryCat" : "Mirrors"
}, {
  "id" : "64ca0e64-3cde-4805-9c7e-0713f2c3f459",
  "primaryCat" : "Home",
  "secondaryCat" : "Home Accessories",
  "tertiaryCat" : "Vases"
}, {
  "id" : "25429e86-f654-4e96-a506-08092fa7ca44",
  "primaryCat" : "Home",
  "secondaryCat" : "Tableware",
  "tertiaryCat" : "Dinnerware"
}, {
  "id" : "efa32f23-94e2-4c9e-a3b2-235381e41392",
  "primaryCat" : "Home",
  "secondaryCat" : "Tableware",
  "tertiaryCat" : "Cutlery"
}, {
  "id" : "74f36382-6476-494e-aae8-e7eb6b766476",
  "primaryCat" : "Home",
  "secondaryCat" : "Tableware",
  "tertiaryCat" : "Drink ware"
}, {
  "id" : "6e6ea558-c373-49df-997b-3df7afe751f3",
  "primaryCat" : "Other",
  "secondaryCat" : "Other#2",
  "tertiaryCat" : "Other#3"
} ]}; TIME TAKEN={14} 
